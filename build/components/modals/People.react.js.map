{"version":3,"sources":["../../../src/components/modals/People.react.js"],"names":["PeopleList","getStores","calculateState","prevState","selectedIndex","contacts","getState","props","state","query","handleClose","bind","handleSearchChange","handleContactSelect","handleKeyDown","handleScroll","componentDidMount","setFocus","document","addEventListener","componentWillUnmount","removeEventListener","refs","search","focus","close","event","target","value","setState","contact","selectDialogPeerUser","uid","results","getPeople","offset","index","selectNext","length","scrollContainerNode","selectedNode","selected","scrollContainerNodeRect","getBoundingClientRect","selectedNodeRect","top","height","scrollTop","selectPrev","scrollHeight","keyCode","ENTER","stopPropagation","preventDefault","ARROW_UP","ARROW_DOWN","TAB","shiftKey","filter","score","name","renderPeople","people","map","renderSearch","intl","context","messages","render","contextTypes","object","create","pure"],"mappings":"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","file":"People.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Modal from 'react-modal';\nimport { findDOMNode } from 'react-dom';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport fuzzaldrin from 'fuzzaldrin';\n\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport ContactActionCreators from '../../actions/ContactActionCreators';\nimport DialogActionCreators from '../../actions/DialogActionCreators';\n\nimport PeopleStore from '../../stores/PeopleStore';\n\nimport People from './peoples/PeopleItem.react';\nimport ModalCloseButton from './ModalCloseButton.react';\n\nclass PeopleList extends Component {\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static getStores() {\n    return [PeopleStore];\n  }\n\n  static calculateState(prevState) {\n    return {\n      ...prevState,\n      selectedIndex: 0,\n      contacts: PeopleStore.getState()\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: null,\n      selectedIndex: 0\n    };\n\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleContactSelect = this.handleContactSelect.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  componentDidMount() {\n    this.setFocus();\n    document.addEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  setFocus() {\n    findDOMNode(this.refs.search).focus();\n  }\n\n  handleClose() {\n    ContactActionCreators.close();\n  }\n\n  handleSearchChange(event) {\n    const query = event.target.value;\n    this.setState({ query });\n  }\n\n  handleContactSelect(contact) {\n    DialogActionCreators.selectDialogPeerUser(contact.uid);\n    this.handleClose()\n  }\n\n  handleKeyDown(event) {\n    const { selectedIndex } = this.state;\n    const results = this.getPeople();\n    const offset = 18;\n    let index = selectedIndex;\n\n    const selectNext = () => {\n      if (index < results.length - 1) {\n        index += 1;\n      } else if (index === results.length - 1) {\n        index = 0;\n      }\n\n      this.setState({ selectedIndex: index });\n\n      const scrollContainerNode = findDOMNode(this.refs.results);\n      const selectedNode = findDOMNode(this.refs.selected);\n      const scrollContainerNodeRect = scrollContainerNode.getBoundingClientRect();\n      const selectedNodeRect = selectedNode.getBoundingClientRect();\n\n      if ((scrollContainerNodeRect.top + scrollContainerNodeRect.height) < (selectedNodeRect.top + selectedNodeRect.height)) {\n        this.handleScroll(scrollContainerNode.scrollTop + (selectedNodeRect.top + selectedNodeRect.height) - (scrollContainerNodeRect.top + scrollContainerNodeRect.height) + offset);\n      } else if (scrollContainerNodeRect.top > selectedNodeRect.top) {\n        this.handleScroll(0);\n      }\n    };\n    const selectPrev = () => {\n      if (index > 0) {\n        index -= 1;\n      } else if (index === 0) {\n        index = results.length - 1;\n      }\n\n      this.setState({ selectedIndex: index });\n\n      const scrollContainerNode = findDOMNode(this.refs.results);\n      const selectedNode = findDOMNode(this.refs.selected);\n      const scrollContainerNodeRect = scrollContainerNode.getBoundingClientRect();\n      const selectedNodeRect = selectedNode.getBoundingClientRect();\n\n      if (scrollContainerNodeRect.top > selectedNodeRect.top) {\n        this.handleScroll(scrollContainerNode.scrollTop + selectedNodeRect.top - scrollContainerNodeRect.top - offset);\n      } else if (selectedNodeRect.top > (scrollContainerNodeRect.top + scrollContainerNodeRect.height)) {\n        this.handleScroll(scrollContainerNode.scrollHeight);\n      }\n    };\n\n    switch (event.keyCode) {\n      case KeyCodes.ENTER:\n        event.stopPropagation();\n        event.preventDefault();\n        this.handleContactSelect(results[selectedIndex]);\n        break;\n\n      case KeyCodes.ARROW_UP:\n        event.stopPropagation();\n        event.preventDefault();\n        selectPrev();\n        break;\n      case KeyCodes.ARROW_DOWN:\n        event.stopPropagation();\n        event.preventDefault();\n        selectNext();\n        break;\n      case KeyCodes.TAB:\n        event.stopPropagation();\n        event.preventDefault();\n        if (event.shiftKey) {\n          selectPrev();\n        } else {\n          selectNext();\n        }\n        break;\n      default:\n    }\n  }\n\n  handleScroll(top)  {\n    const scrollContainerNode = findDOMNode(this.refs.results);\n    scrollContainerNode.scrollTop = top;\n  }\n\n  getPeople() {\n    const { query, contacts } = this.state;\n    if (!query || query === '') return contacts;\n\n    return contacts.filter((contact) => {\n      return fuzzaldrin.score(contact.name, query) > 0;\n    });\n  }\n\n  renderPeople() {\n    const { selectedIndex, contacts } = this.state;\n    const people = this.getPeople();\n\n    if (contacts.length === 0) {\n      return (\n        <li className=\"result-list__item result-list__item--empty text-center\">\n          <FormattedMessage id=\"modal.contacts.loading\"/>\n        </li>\n      );\n    }\n\n    if (!people.length) {\n      return (\n        <li className=\"result-list__item result-list__item--empty text-center\">\n          <FormattedMessage id=\"modal.contacts.notFound\"/>\n        </li>\n      );\n    }\n\n    return people.map((contact, index) => (\n      <People\n        contact={contact}\n        key={contact.uid}\n        onClick={this.handleContactSelect}\n        isSelected={selectedIndex === index}\n        ref={selectedIndex === index ? 'selected' : null}\n        onMouseOver={() => this.setState({ selectedIndex: index })}\n      />\n    ));\n  }\n\n  renderSearch() {\n    const { query } = this.state;\n    const { intl } = this.context;\n\n    return (\n      <section className=\"large-search\">\n        <input className=\"input\"\n               onChange={this.handleSearchChange}\n               placeholder={intl.messages['modal.contacts.search']}\n               type=\"search\"\n               ref=\"search\"\n               value={query}/>\n      </section>\n    );\n  }\n\n  render() {\n    return (\n      <Modal\n        overlayClassName=\"modal-overlay modal-overlay--white\"\n        className=\"modal modal--fullscreen modal--without-scroll\"\n        onRequestClose={this.handleClose}\n        shouldCloseOnOverlayClick={false}\n        isOpen>\n\n        <ModalCloseButton onClick={this.handleClose}/>\n\n        <div className=\"people-list\">\n          <div className=\"modal__content\">\n\n            <header className=\"modal__header\">\n              <FormattedMessage id=\"modal.contacts.title\" tagName=\"h1\"/>\n            </header>\n\n            {this.renderSearch()}\n\n            <div className=\"modal__body\" ref=\"results\">\n              <ul className=\"result-list\">\n                {this.renderPeople()}\n              </ul>\n            </div>\n\n          </div>\n        </div>\n\n      </Modal>\n    )\n  }\n}\n\nexport default Container.create(PeopleList, { pure: false });\n"]}