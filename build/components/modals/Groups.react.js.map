{"version":3,"sources":["../../../src/components/modals/Groups.react.js"],"names":["GroupList","getStores","calculateState","prevState","selectedIndex","list","getState","props","state","query","handleClose","bind","handleSearchChange","handleGroupSelect","handleKeyDown","handleScroll","componentDidMount","setFocus","document","addEventListener","componentWillUnmount","removeEventListener","refs","search","focus","close","event","target","value","setState","peer","peerStr","peerToString","push","results","getList","offset","index","selectNext","length","scrollContainerNode","selectedNode","selected","scrollContainerNodeRect","getBoundingClientRect","selectedNodeRect","top","height","scrollTop","selectPrev","scrollHeight","keyCode","ENTER","stopPropagation","preventDefault","peerInfo","ARROW_UP","ARROW_DOWN","TAB","shiftKey","filter","group","score","title","renderSearchInput","intl","context","messages","renderList","map","result","render","contextTypes","object","create","pure"],"mappings":"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","file":"Groups.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Modal from 'react-modal';\nimport { findDOMNode } from 'react-dom';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage, FormattedHTMLMessage } from 'react-intl';\nimport history from '../../utils/history';\nimport PeerUtils from '../../utils/PeerUtils';\nimport fuzzaldrin from 'fuzzaldrin';\n\nimport ModalCloseButton from './ModalCloseButton.react';\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport GroupListActionCreators from '../../actions/GroupListActionCreators'\n\nimport GroupListStore from '../../stores/GroupListStore';\n\nimport Group from './groups/Group.react';\n\nclass GroupList extends Component {\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static getStores() {\n    return [GroupListStore];\n  }\n\n  static calculateState(prevState) {\n    return {\n      ...prevState,\n      selectedIndex: 0,\n      list: GroupListStore.getState()\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: null,\n      selectedIndex: 0\n    }\n\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleGroupSelect = this.handleGroupSelect.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  componentDidMount() {\n    this.setFocus();\n    document.addEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  setFocus() {\n    findDOMNode(this.refs.search).focus()\n  }\n\n  handleClose() {\n    GroupListActionCreators.close();\n  }\n\n  handleSearchChange(event) {\n    const query = event.target.value;\n    this.setState({ query });\n  }\n\n  handleGroupSelect(peer) {\n    const peerStr = PeerUtils.peerToString(peer);\n    history.push(`/im/${peerStr}`);\n    this.handleClose()\n  }\n\n  handleKeyDown(event) {\n    const { selectedIndex } = this.state;\n    const results = this.getList();\n    const offset = 18;\n    let index = selectedIndex;\n\n    const selectNext = () => {\n      if (index < results.length - 1) {\n        index += 1;\n      } else if (index === results.length - 1) {\n        index = 0;\n      }\n\n      this.setState({ selectedIndex: index });\n\n      const scrollContainerNode = findDOMNode(this.refs.results);\n      const selectedNode = findDOMNode(this.refs.selected);\n      const scrollContainerNodeRect = scrollContainerNode.getBoundingClientRect();\n      const selectedNodeRect = selectedNode.getBoundingClientRect();\n\n      if ((scrollContainerNodeRect.top + scrollContainerNodeRect.height) < (selectedNodeRect.top + selectedNodeRect.height)) {\n        this.handleScroll(scrollContainerNode.scrollTop + (selectedNodeRect.top + selectedNodeRect.height) - (scrollContainerNodeRect.top + scrollContainerNodeRect.height) + offset);\n      } else if (scrollContainerNodeRect.top > selectedNodeRect.top) {\n        this.handleScroll(0);\n      }\n    };\n    const selectPrev = () => {\n      if (index > 0) {\n        index -= 1;\n      } else if (index === 0) {\n        index = results.length - 1;\n      }\n\n      this.setState({ selectedIndex: index });\n\n      const scrollContainerNode = findDOMNode(this.refs.results);\n      const selectedNode = findDOMNode(this.refs.selected);\n      const scrollContainerNodeRect = scrollContainerNode.getBoundingClientRect();\n      const selectedNodeRect = selectedNode.getBoundingClientRect();\n\n      if (scrollContainerNodeRect.top > selectedNodeRect.top) {\n        this.handleScroll(scrollContainerNode.scrollTop + selectedNodeRect.top - scrollContainerNodeRect.top - offset);\n      } else if (selectedNodeRect.top > (scrollContainerNodeRect.top + scrollContainerNodeRect.height)) {\n       this.handleScroll(scrollContainerNode.scrollHeight);\n      }\n    };\n\n    switch (event.keyCode) {\n      case KeyCodes.ENTER:\n        event.stopPropagation();\n        event.preventDefault();\n        this.handleGroupSelect(results[selectedIndex].peerInfo.peer);\n        break;\n\n      case KeyCodes.ARROW_UP:\n        event.stopPropagation();\n        event.preventDefault();\n        selectPrev();\n        break;\n      case KeyCodes.ARROW_DOWN:\n        event.stopPropagation();\n        event.preventDefault();\n        selectNext();\n        break;\n      case KeyCodes.TAB:\n        event.stopPropagation();\n        event.preventDefault();\n        if (event.shiftKey) {\n          selectPrev();\n        } else {\n          selectNext();\n        }\n        break;\n      default:\n    }\n  }\n\n  handleScroll(top) {\n    findDOMNode(this.refs.results).scrollTop = top;\n  }\n\n  getList() {\n    const { query, list } = this.state;\n\n    if (!query || query === '') return list;\n\n    return list.filter((group) => {\n      return fuzzaldrin.score(group.peerInfo.title, query) > 0;\n    });\n  }\n\n  renderSearchInput() {\n    const { query } = this.state;\n    const { intl } = this.context;\n\n    return (\n      <section className=\"large-search\">\n        <input className=\"input\"\n               onChange={this.handleSearchChange}\n               placeholder={intl.messages['modal.groups.search']}\n               type=\"search\"\n               ref=\"search\"\n               value={query}/>\n      </section>\n    );\n  }\n\n  renderList() {\n    const { query, selectedIndex, list } = this.state;\n    const results = this.getList();\n\n    if (list.length === 0) {\n      return (\n        <div className=\"result-list__item result-list__item--empty text-center\">\n          <FormattedMessage id=\"modal.groups.loading\"/>\n        </div>\n      );\n    }\n\n    if (results.length === 0) {\n      return (\n        <div className=\"result-list__item result-list__item--empty text-center\">\n          <FormattedHTMLMessage id=\"modal.groups.notFound\" values={{ query }}/>\n        </div>\n      );\n    }\n\n    return results.map((result, index) => {\n      return (\n        <Group\n          group={result}\n          key={index}\n          isSelected={selectedIndex === index}\n          ref={selectedIndex === index ? 'selected' : null}\n          onClick={this.handleGroupSelect}\n          onMouseOver={() => this.setState({ selectedIndex: index })}\n        />\n      )\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        overlayClassName=\"modal-overlay modal-overlay--white\"\n        className=\"modal modal--fullscreen modal--without-scroll\"\n        onRequestClose={this.handleClose}\n        shouldCloseOnOverlayClick={false}\n        isOpen>\n\n        <ModalCloseButton onClick={this.handleClose}/>\n\n        <div className=\"group-list\">\n          <div className=\"modal__content\">\n\n            <header className=\"modal__header\">\n              <FormattedMessage id=\"modal.groups.title\" tagName=\"h1\"/>\n            </header>\n\n            {this.renderSearchInput()}\n\n            <div className=\"modal__body\" ref=\"results\">\n              <div className=\"result-list\">\n                {this.renderList()}\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </Modal>\n    )\n  }\n}\n\nexport default Container.create(GroupList, { pure: false });\n"]}