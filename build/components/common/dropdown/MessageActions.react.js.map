{"version":3,"sources":["../../../../src/components/common/dropdown/MessageActions.react.js"],"names":["MessageActions","props","handleDocumentClick","event","dropdown","refs","dropdownRect","getBoundingClientRect","coords","x","pageX","clientX","y","pageY","clientY","preventDefault","handleDropdownClose","hideMessageDropdown","handleDelete","peer","message","deleteMessage","rid","handleReply","info","getUser","sender","id","replyText","nick","name","pasteText","handleQuote","content","text","shouldComponentUpdate","bind","componentDidMount","listeners","capture","document","componentWillUnmount","forEach","listener","remove","render","targetRect","intl","context","isThisMyMessage","getMyId","dropdownStyles","top","left","dropdownMenuStyles","minWidth","right","messages","TEXT","propTypes","object","isRequired","contextTypes"],"mappings":";;;;AAIA;;;;AACA;;;;AACA;;AACA;;AAEA;;;;AACA;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;+eAlBA;;;;IAoBMA,c;;;AAWJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAMA,KAAN,CADiB;;AAAA,UAqBnBC,mBArBmB,GAqBG,UAACC,KAAD,EAAW;AAC/B,UAAMC,WAAW,2BAAY,MAAKC,IAAL,CAAUD,QAAtB,CAAjB;AACA,UAAME,eAAeF,SAASG,qBAAT,EAArB;AACA,UAAMC,SAAS;AACbC,WAAGN,MAAMO,KAAN,IAAeP,MAAMQ,OADX;AAEbC,WAAGT,MAAMU,KAAN,IAAeV,MAAMW;AAFX,OAAf;;AAKA,UAAI,CAAC,wBAASN,MAAT,EAAiBF,YAAjB,CAAL,EAAqC;AACnCH,cAAMY,cAAN;AACA,cAAKC,mBAAL;AACD;AACF,KAjCkB;;AAAA,UAoCnBA,mBApCmB,GAoCG;AAAA,aAAM,iCAAuBC,mBAAvB,EAAN;AAAA,KApCH;;AAAA,UAsCnBC,YAtCmB,GAsCJ,YAAM;AAAA,wBACO,MAAKjB,KADZ;AAAA,UACXkB,IADW,eACXA,IADW;AAAA,UACLC,OADK,eACLA,OADK;;AAEnB,sCAAsBC,aAAtB,CAAoCF,IAApC,EAA0CC,QAAQE,GAAlD;AACA,YAAKN,mBAAL;AACD,KA1CkB;;AAAA,UA4CnBO,WA5CmB,GA4CL,YAAM;AAAA,UACVH,OADU,GACE,MAAKnB,KADP,CACVmB,OADU;;AAElB,UAAMI,OAAO,oBAAUC,OAAV,CAAkBL,QAAQM,MAAR,CAAeP,IAAf,CAAoBQ,EAAtC,CAAb;AACA,UAAMC,YAAYJ,KAAKK,IAAL,SAAgBL,KAAKK,IAArB,UAAmCL,KAAKM,IAAxC,OAAlB;AACA,sCAAsBC,SAAtB,CAAgCH,SAAhC;AACA,YAAKZ,mBAAL;AACD,KAlDkB;;AAAA,UAoDnBgB,WApDmB,GAoDL,YAAM;AAAA,UACVZ,OADU,GACE,MAAKnB,KADP,CACVmB,OADU;;AAElB,sCAAsBW,SAAtB,CAAgC,gCAAaX,QAAQa,OAAR,CAAgBC,IAA7B,IAAqC,IAArE;AACA,YAAKlB,mBAAL;AACD,KAxDkB;;AAGjB,UAAKmB,qBAAL,GAA6B,kDAAsBC,IAAtB,OAA7B;AAHiB;AAIlB;;2BAEDC,iB,gCAAoB;AAClB,SAAKC,SAAL,GAAiB,CACf,wBAAcC,OAAd,CAAsBC,QAAtB,EAAgC,OAAhC,EAAyC,KAAKtC,mBAA9C,CADe,EAEf,wBAAcqC,OAAd,CAAsBC,QAAtB,EAAgC,QAAhC,EAA0C,KAAKxB,mBAA/C,CAFe,CAAjB;AAID,G;;2BAEDyB,oB,mCAAuB;AACrB,SAAKH,SAAL,CAAeI,OAAf,CAAuB,UAACC,QAAD,EAAc;AACnCA,eAASC,MAAT;AACD,KAFD;;AAIA,SAAKN,SAAL,GAAiB,IAAjB;AACD,G;;2BAuCDO,M,qBAAS;AAAA,iBACyB,KAAK5C,KAD9B;AAAA,QACCmB,OADD,UACCA,OADD;AAAA,QACU0B,UADV,UACUA,UADV;AAAA,QAECC,IAFD,GAEU,KAAKC,OAFf,CAECD,IAFD;;;AAIP,QAAME,kBAAkB,oBAAUC,OAAV,OAAwB9B,QAAQM,MAAR,CAAeP,IAAf,CAAoBQ,EAApE;;AAEA,QAAMwB,iBAAiB;AACrBC,WAAKN,WAAWM,GADK;AAErBC,YAAMP,WAAWO;AAFI,KAAvB;;AAKA,QAAMC,qBAAqB;AACzBC,gBAAU,GADe;AAEzBC,aAAO,CAFkB;AAGzBJ,WAAK,CAAC;AAHmB,KAA3B;;AAMA,WACE;AAAA;AAAA,QAAK,WAAU,2CAAf,EAA2D,OAAOD,cAAlE;AACE;AAAA;AAAA,UAAI,WAAU,sCAAd,EAAqD,KAAI,UAAzD,EAAoE,OAAOG,kBAA3E;AACE;AAAA;AAAA,YAAI,WAAU,2BAAd;AACE;AAAA;AAAA,cAAG,WAAU,qBAAb;AAAA;AAAA,WADF;AAAA;AACoDP,eAAKU,QAAL,CAAc,aAAd;AADpD,SADF;AAKI,SAACR,eAAD,GACI;AAAA;AAAA,YAAI,WAAU,sBAAd,EAAqC,SAAS,KAAK1B,WAAnD;AACE;AAAA;AAAA,cAAG,WAAU,qBAAb;AAAA;AAAA,WADF;AAAA;AACgDwB,eAAKU,QAAL,CAAc,eAAd;AADhD,SADJ,GAII,IATR;AAYIrC,gBAAQa,OAAR,CAAgBA,OAAhB,KAA4B,uCAAoByB,IAAhD,GACI;AAAA;AAAA,YAAI,WAAU,sBAAd,EAAqC,SAAS,KAAK1B,WAAnD;AACE;AAAA;AAAA,cAAG,WAAU,qBAAb;AAAA;AAAA,WADF;AAAA;AACuDe,eAAKU,QAAL,CAAc,eAAd;AADvD,SADJ,GAII,IAhBR;AAkBE;AAAA;AAAA,YAAI,WAAU,2BAAd;AACE;AAAA;AAAA,cAAG,WAAU,qBAAb;AAAA;AAAA,WADF;AAAA;AACkDV,eAAKU,QAAL,CAAc,iBAAd;AADlD,SAlBF;AAqBE;AAAA;AAAA,YAAI,WAAU,sBAAd,EAAqC,SAAS,KAAKvC,YAAnD;AACE;AAAA;AAAA,cAAG,WAAU,qBAAb;AAAA;AAAA,WADF;AAAA;AACiD6B,eAAKU,QAAL,CAAc,gBAAd;AADjD;AArBF;AADF,KADF;AA6BD,G;;;;;AAnHGzD,c,CACG2D,S,GAAY;AACjBxC,QAAM,iBAAUyC,MAAV,CAAiBC,UADN;AAEjBzC,WAAS,iBAAUwC,MAAV,CAAiBC,UAFT;AAGjBf,cAAY,iBAAUc,MAAV,CAAiBC;AAHZ,C;AADf7D,c,CAOG8D,Y,GAAe;AACpBf,QAAM,iBAAUa;AADI,C;kBA+GT5D,c","file":"MessageActions.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport EventListener from 'fbjs/lib/EventListener';\nimport { findDOMNode } from 'react-dom';\nimport { shouldComponentUpdate } from 'react-addons-pure-render-mixin';\n\nimport isInside from '../../../utils/isInside';\nimport { quoteMessage } from '../../../utils/MessageUtils';\n\nimport { MessageContentTypes } from '../../../constants/ActorAppConstants';\n\nimport MessageActionCreators from '../../../actions/MessageActionCreators';\nimport ComposeActionCreators from '../../../actions/ComposeActionCreators';\nimport DropdownActionCreators from '../../../actions/DropdownActionCreators';\n\nimport UserStore from '../../../stores/UserStore';\n\nclass MessageActions extends Component {\n  static propTypes = {\n    peer: PropTypes.object.isRequired,\n    message: PropTypes.object.isRequired,\n    targetRect: PropTypes.object.isRequired\n  };\n\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = shouldComponentUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    this.listeners = [\n      EventListener.capture(document, 'click', this.handleDocumentClick),\n      EventListener.capture(document, 'scroll', this.handleDropdownClose)\n    ];\n  }\n\n  componentWillUnmount() {\n    this.listeners.forEach((listener) => {\n      listener.remove();\n    });\n\n    this.listeners = null;\n  }\n\n  handleDocumentClick = (event) => {\n    const dropdown = findDOMNode(this.refs.dropdown);\n    const dropdownRect = dropdown.getBoundingClientRect();\n    const coords = {\n      x: event.pageX || event.clientX,\n      y: event.pageY || event.clientY\n    };\n\n    if (!isInside(coords, dropdownRect)) {\n      event.preventDefault();\n      this.handleDropdownClose();\n    }\n  };\n\n\n  handleDropdownClose = () => DropdownActionCreators.hideMessageDropdown();\n\n  handleDelete = () => {\n    const { peer, message } = this.props;\n    MessageActionCreators.deleteMessage(peer, message.rid);\n    this.handleDropdownClose();\n  };\n\n  handleReply = () => {\n    const { message } = this.props;\n    const info = UserStore.getUser(message.sender.peer.id);\n    const replyText = info.nick ? `@${info.nick}: ` : `${info.name}: `;\n    ComposeActionCreators.pasteText(replyText);\n    this.handleDropdownClose();\n  };\n\n  handleQuote = () => {\n    const { message } = this.props;\n    ComposeActionCreators.pasteText(quoteMessage(message.content.text) + '\\n');\n    this.handleDropdownClose();\n  };\n\n  render() {\n    const { message, targetRect } = this.props;\n    const { intl } = this.context;\n\n    const isThisMyMessage = UserStore.getMyId() === message.sender.peer.id;\n\n    const dropdownStyles = {\n      top: targetRect.top,\n      left: targetRect.left\n    };\n\n    const dropdownMenuStyles = {\n      minWidth: 120,\n      right: 2,\n      top: -4\n    };\n\n    return (\n      <div className=\"dropdown dropdown--opened dropdown--small\" style={dropdownStyles}>\n        <ul className=\"dropdown__menu dropdown__menu--right\" ref=\"dropdown\" style={dropdownMenuStyles}>\n          <li className=\"dropdown__menu__item hide\">\n            <i className=\"icon material-icons\">star_rate</i> {intl.messages['message.pin']}\n          </li>\n          {\n            !isThisMyMessage\n              ? <li className=\"dropdown__menu__item\" onClick={this.handleReply}>\n                  <i className=\"icon material-icons\">reply</i> {intl.messages['message.reply']}\n                </li>\n              : null\n          }\n          {\n            message.content.content === MessageContentTypes.TEXT\n              ? <li className=\"dropdown__menu__item\" onClick={this.handleQuote}>\n                  <i className=\"icon material-icons\">format_quote</i> {intl.messages['message.quote']}\n                </li>\n              : null\n          }\n          <li className=\"dropdown__menu__item hide\">\n            <i className=\"icon material-icons\">forward</i> {intl.messages['message.forward']}\n          </li>\n          <li className=\"dropdown__menu__item\" onClick={this.handleDelete}>\n            <i className=\"icon material-icons\">delete</i> {intl.messages['message.delete']}\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default MessageActions;\n"]}