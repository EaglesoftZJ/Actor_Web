{"version":3,"sources":["../../../src/components/common/ConnectionState.react.js"],"names":["ConnectionState","props","SharedActor","get","appName","getStores","calculateState","connectionState","getState","render","state","className","ONLINE","CONNECTING","UPDATING","create","pure"],"mappings":";;;;AAIA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;+eAXA;;;;IAaMA,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAMA,KAAN,CADiB;;AAGjB,QAAMC,cAAc,0BAAgBC,GAAhB,EAApB;AACA,UAAKC,OAAL,GAAeF,YAAYE,OAAZ,GAAsBF,YAAYE,OAAlC,6BAAf;AAJiB;AAKlB;;kBAEMC,S,wBAAY;AACjB,WAAO,gCAAP;AACD,G;;kBAEMC,c,6BAAiB;AACtB,WAAO;AACLC,uBAAiB,+BAAqBC,QAArB;AADZ,KAAP;AAGD,G;;4BAEDC,M,qBAAS;AAAA,QACCF,eADD,GACqB,KAAKG,KAD1B,CACCH,eADD;;;AAGP,QAAMI,YAAY,0BAAW,kBAAX,EAA+B;AAC/C,kCAA4BJ,oBAAoB,oCAAiBK,MADlB;AAE/C,sCAAgCL,oBAAoB,oCAAiBM;AAFtB,KAA/B,CAAlB;;AAKA,WACE;AAAA;AAAA,QAAK,WAAWF,SAAhB;AAEIJ,0BAAoB,oCAAiBO,QAArC,GACI,6DAAkB,yBAAuBP,eAAzC,EAA4D,QAAQ,EAAEH,SAAS,KAAKA,OAAhB,EAApE,GADJ,GAEI;AAJR,KADF;AASD,G;;;;;kBAGY,iBAAUW,MAAV,CAAiBf,eAAjB,EAAkC,EAAEgB,MAAM,KAAR,EAAlC,C","file":"ConnectionState.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport SharedContainer from '../../utils/SharedContainer';\nimport { appName, ConnectionStates } from '../../constants/ActorAppConstants';\nimport classnames from 'classnames';\n\nimport ConnectionStateStore from '../../stores/ConnectionStateStore';\n\nclass ConnectionState extends Component {\n  constructor(props) {\n    super(props);\n\n    const SharedActor = SharedContainer.get();\n    this.appName = SharedActor.appName ? SharedActor.appName : appName;\n  }\n\n  static getStores() {\n    return [ConnectionStateStore];\n  }\n\n  static calculateState() {\n    return {\n      connectionState: ConnectionStateStore.getState()\n    };\n  }\n\n  render() {\n    const { connectionState } = this.state;\n\n    const className = classnames('connection-state', {\n      'connection-state--online': connectionState === ConnectionStates.ONLINE,\n      'connection-state--connection': connectionState === ConnectionStates.CONNECTING\n    });\n\n    return (\n      <div className={className}>\n        {\n          connectionState !== ConnectionStates.UPDATING\n            ? <FormattedMessage id={`connectionState.${connectionState}`} values={{ appName: this.appName }}/>\n            : null\n        }\n      </div>\n    )\n  }\n}\n\nexport default Container.create(ConnectionState, { pure: false });\n"]}