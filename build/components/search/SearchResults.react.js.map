{"version":3,"sources":["../../../src/components/search/SearchResults.react.js"],"names":["SearchResults","props","shouldComponentUpdate","bind","renderResults","query","results","isSearching","length","map","result","index","render","propTypes","string","isRequired","array","bool"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;+eARA;;;;IAUMA,a;;;AAOJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAMA,KAAN,CADiB;;AAGjB,UAAKC,qBAAL,GAA6B,kDAAsBC,IAAtB,OAA7B;AAHiB;AAIlB;;0BAEDC,a,4BAAgB;AAAA,iBAC0B,KAAKH,KAD/B;AAAA,QACNI,KADM,UACNA,KADM;AAAA,QACCC,OADD,UACCA,OADD;AAAA,QACUC,WADV,UACUA,WADV;;;AAGd,QAAI,CAACF,KAAL,EAAY;AACV,aACE;AAAA;AAAA,UAAI,WAAU,oDAAd;AACE,qEAAkB,IAAG,mBAArB;AADF,OADF;AAKD;;AAED,QAAIE,WAAJ,EAAiB;AACf,aACE;AAAA;AAAA,UAAI,WAAU,wDAAd;AACE,qEAAkB,IAAG,kBAArB,EAAwC,QAAQ,EAAEF,YAAF,EAAhD;AADF,OADF;AAKD;;AAED,QAAI,CAACC,QAAQE,MAAb,EAAqB;AACnB,aACE;AAAA;AAAA,UAAI,WAAU,wDAAd;AACE,yEAAsB,IAAG,iBAAzB,EAA2C,QAAQ,EAAEH,YAAF,EAAnD;AADF,OADF;AAKD;;AAED,WAAOC,QAAQG,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT,EAAmB;AACpC,aAAO,uEAAsBD,MAAtB,IAA8B,KAAKC,KAAnC,IAAP;AACD,KAFM,CAAP;AAGD,G;;0BAEDC,M,qBAAS;AACP,WACE;AAAA;AAAA,QAAU,WAAU,cAApB;AACG,WAAKR,aAAL;AADH,KADF;AAKD,G;;;;;AAnDGJ,a,CACGa,S,GAAY;AACjBR,SAAO,iBAAUS,MAAV,CAAiBC,UADP;AAEjBT,WAAS,iBAAUU,KAAV,CAAgBD,UAFR;AAGjBR,eAAa,iBAAUU,IAAV,CAAeF;AAHX,C;kBAqDNf,a","file":"SearchResults.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { shouldComponentUpdate } from 'react-addons-pure-render-mixin';\nimport { FormattedMessage, FormattedHTMLMessage } from 'react-intl';\nimport Scroller from '../common/Scroller.react';\nimport SearchResultItem from './SearchResultItem.react';\n\nclass SearchResults extends Component {\n  static propTypes = {\n    query: PropTypes.string.isRequired,\n    results: PropTypes.array.isRequired,\n    isSearching: PropTypes.bool.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = shouldComponentUpdate.bind(this);\n  }\n\n  renderResults() {\n    const { query, results, isSearching } = this.props;\n\n    if (!query) {\n      return (\n        <li className=\"search__results__item search__results__item--empty\">\n          <FormattedMessage id=\"search.emptyQuery\" />\n        </li>\n      );\n    }\n\n    if (isSearching) {\n      return (\n        <li className=\"search__results__item search__results__item--not-found\">\n          <FormattedMessage id=\"search.searching\" values={{ query }} />\n        </li>\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <li className=\"search__results__item search__results__item--not-found\">\n          <FormattedHTMLMessage id=\"search.notFound\" values={{ query }} />\n        </li>\n      );\n    }\n\n    return results.map((result, index) => {\n      return <SearchResultItem {...result} key={index} />\n    });\n  }\n\n  render() {\n    return (\n      <Scroller className=\"search__body\">\n        {this.renderResults()}\n      </Scroller>\n    );\n  }\n}\n\nexport default SearchResults;\n"]}