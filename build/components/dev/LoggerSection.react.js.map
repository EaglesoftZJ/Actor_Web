{"version":3,"sources":["../../../src/components/dev/LoggerSection.react.js"],"names":["LoggerSection","getStores","calculateState","isOpen","logs","getLogs","length","onClose","renderLogs","result","state","i","push","render","create"],"mappings":";;;;AAIA;;;;AACA;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;+eAZA;;;;IAcMA,a;;;;;;;;;gBACGC,S,wBAAY;AACjB,WAAO,uBAAP;AACD,G;;gBAEMC,c,6BAAiB;AACtB,QAAMC,SAAS,sBAAYA,MAAZ,EAAf;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,EAAEA,QAAQ,KAAV,EAAP;AACD;;AAED,QAAMC,OAAO,sBAAYC,OAAZ,EAAb;AACA,WAAO;AACLF,oBADK;AAELC,gBAFK;AAGLE,cAAQF,KAAKE;AAHR,KAAP;AAKD,G;;0BAEDC,O,sBAAU;AACR;AACD,G;;0BAEDC,U,yBAAa;AACX,QAAMC,SAAS,EAAf;;AADW,QAGHL,IAHG,GAGM,KAAKM,KAHX,CAGHN,IAHG;;AAIX,SAAK,IAAIO,IAAIP,KAAKE,MAAL,GAAc,CAA3B,EAA8BK,KAAK,CAAnC,EAAsCA,GAAtC,EAA2C;AACzCF,aAAOG,IAAP,CACE,qDAAW,MAAMR,KAAKO,CAAL,CAAjB,EAA0B,KAAKA,CAA/B,GADF;AAGD;;AAED,WAAOF,MAAP;AACD,G;;0BAEDI,M,qBAAS;AACP,QAAI,CAAC,KAAKH,KAAL,CAAWP,MAAhB,EAAwB;AACtB,aAAO,2CAAS,WAAU,iBAAnB,GAAP;AACD;;AAED,WACE;AAAA;AAAA,QAAS,WAAU,iCAAnB;AACE;AAAA;AAAA,UAAK,WAAU,6BAAf;AACE;AAAA;AAAA,YAAK,WAAU,kBAAf;AACE;AAAA;AAAA,cAAQ,WAAU,qBAAlB,EAAwC,MAAK,QAA7C,EAAsD,SAAS,KAAKI,OAApE;AACE;AAAA;AAAA,gBAAG,WAAU,gBAAb;AAAA;AAAA;AADF;AADF,SADF;AAME,mEANF;AAOE;AAAA;AAAA;AACE;AAAA;AAAA,cAAK,WAAU,mBAAf;AACG,iBAAKC,UAAL;AADH;AADF;AAPF;AADF,KADF;AAiBD,G;;;;;kBAGY,iBAAUM,MAAV,CAAiBd,aAAjB,C","file":"LoggerSection.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\n\nimport LoggerStore from '../../stores/LoggerStore';\nimport { loggerToggle } from '../../actions/LoggerActionCreators';\n\nimport Scrollbar from '../common/Scrollbar.react';\nimport LoggerFilter from './LoggerFilter.react';\nimport LoggerRow from './LoggerRow.react';\n\nclass LoggerSection extends Component {\n  static getStores() {\n    return [LoggerStore];\n  }\n\n  static calculateState() {\n    const isOpen = LoggerStore.isOpen();\n    if (!isOpen) {\n      return { isOpen: false };\n    }\n\n    const logs = LoggerStore.getLogs();\n    return {\n      isOpen,\n      logs,\n      length: logs.length\n    };\n  }\n\n  onClose() {\n    loggerToggle();\n  }\n\n  renderLogs() {\n    const result = [];\n\n    const { logs } = this.state;\n    for (let i = logs.length - 1; i >= 0; i--) {\n      result.push(\n        <LoggerRow data={logs[i]} key={i} />\n      );\n    }\n\n    return result;\n  }\n\n  render() {\n    if (!this.state.isOpen) {\n      return <section className=\"activity logger\" />;\n    }\n\n    return (\n      <section className=\"activity logger activity--shown\">\n        <div className=\"activity__body logger__body\">\n          <div className=\"logger__controls\">\n            <button className=\"button button--icon\" type=\"button\" onClick={this.onClose}>\n              <i className=\"material-icons\">close</i>\n            </button>\n          </div>\n          <LoggerFilter />\n          <Scrollbar>\n            <div className=\"logger__container\">\n              {this.renderLogs()}\n            </div>\n          </Scrollbar>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Container.create(LoggerSection);\n"]}