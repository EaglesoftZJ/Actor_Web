{"version":3,"sources":["../../../../src/components/dialog/messages/MessageItem.react.js"],"names":["MessageItem","getChildContext","message","props","showDocumentRecord","bind","getStores","calculateState","prevState","isHighlighted","isMessageDropdownOpen","rid","context","showActions","event","openMessageActions","target","getBoundingClientRect","toggleMessageSelection","onSelect","onClick","console","log","show","refs","messageItem","shouldComponentUpdate","nextProps","isShort","peer","equals","sender","selectDialogPeerUser","id","renderTitle","isGroupBot","group","getGroup","__html","name","title","renderHeader","state","userName","date","renderLeftBlock","avatar","placeholder","renderActions","isExperimental","messageActionsMenuClassName","render","isSelected","isEditing","messageClassName","content","contextTypes","delegate","object","bool","propTypes","isRequired","string","func","defaultProps","childContextTypes","create","withProps"],"mappings":"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","file":"MessageItem.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { noop } from 'lodash';\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\nimport { escapeWithEmoji } from '../../../utils/EmojiUtils';\nimport PeerUtils from '../../../utils/PeerUtils';\n\nimport DialogActionCreators from '../../../actions/DialogActionCreators';\nimport ActivityActionCreators from '../../../actions/ActivityActionCreators';\nimport DropdownActionCreators from '../../../actions/DropdownActionCreators';\nimport DocumentRecordCreators from '../../../actions/DocumentRecordCreators';\n\nimport DropdownStore from '../../../stores/DropdownStore';\nimport GroupStore from '../../../stores/GroupStore';\n\nimport SvgIcon from '../../common/SvgIcon.react';\nimport AvatarItem from '../../common/AvatarItem.react';\nimport State from './State.react';\nimport Reactions from './Reactions.react';\nimport MessageContent from './MessageContent.react';\n\nclass MessageItem extends Component {\n  static contextTypes = {\n    delegate: PropTypes.object,\n    isExperimental: PropTypes.bool\n  }\n\n  static propTypes = {\n    peer: PropTypes.object.isRequired,\n    message: PropTypes.object.isRequired,\n    state: PropTypes.string.isRequired,\n    isShort: PropTypes.bool.isRequired,\n    isEditing: PropTypes.bool.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelect: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    isSelected: false,\n    onSelect: noop\n  };\n\n  static childContextTypes = {\n      showDocumentRecord: PropTypes.func,\n      message: PropTypes.object\n  };\n\n  getChildContext() {\n      const { message } = this.props;\n    return {\n        showDocumentRecord: this.showDocumentRecord.bind(this),\n        message\n    };\n  }\n\n  static getStores() {\n    return [DropdownStore];\n  }\n\n  static calculateState(prevState, props) {\n    return {\n      isHighlighted: props && props.message ? DropdownStore.isMessageDropdownOpen(props.message.rid) : false\n    }\n  }\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  showDocumentRecord() {\n      // 显示文档下载记录弹窗\n      console.log('showDocumentRecord');\n      const { message } = this.props\n      DocumentRecordCreators.show(message, this.refs.messageItem);\n\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.message !== nextProps.message ||\n           this.props.isShort !== nextProps.isShort;\n  }\n\n  onClick() {\n    const { message, peer } = this.props;\n\n    if (PeerUtils.equals(peer, message.sender.peer)) {\n      ActivityActionCreators.show();\n    } else {\n      DialogActionCreators.selectDialogPeerUser(message.sender.peer.id);\n    }\n  }\n\n  showActions = (event) => {\n    const { message } = this.props;\n    DropdownActionCreators.openMessageActions(event.target.getBoundingClientRect(), message);\n  };\n\n  toggleMessageSelection = () => {\n    const { message, onSelect } = this.props;\n    onSelect(message.rid);\n  };\n\n  renderTitle() {\n    const { message, peer } = this.props;\n\n    if (PeerUtils.isGroupBot(message.sender)) {\n      const group = GroupStore.getGroup(peer.id);\n      return (\n        <span className=\"message__sender__name\" dangerouslySetInnerHTML={{ __html: escapeWithEmoji(group.name) }}/>\n      );\n    } else {\n      return (\n        <span className=\"message__sender__name\" dangerouslySetInnerHTML={{ __html: escapeWithEmoji(message.sender.title) }}/>\n      );\n    }\n  }\n\n  renderHeader() {\n    const { isShort, message, state } = this.props;\n\n    if (isShort) {\n      return null;\n    }\n\n    return (\n      <header className=\"message__header\">\n        <h3 className=\"message__sender\">\n          <a onClick={this.onClick}>\n            {this.renderTitle()}\n            {\n              message.sender.userName\n                ? <span className=\"message__sender__nick\">@{message.sender.userName}</span>\n                : null\n            }\n          </a>\n        </h3>\n        <time className=\"message__timestamp\">{message.date}</time>\n        {/* <State state={state} /> */}\n      </header>\n    );\n  }\n\n  renderLeftBlock() {\n    const { isShort, message, state, peer } = this.props\n\n    if (isShort) {\n      return (\n        <div className=\"message__info\">\n          <time className=\"message__timestamp\">{message.date}</time>\n          {/* <State state={state} /> */}\n        </div>\n      );\n    } else {\n      if (PeerUtils.isGroupBot(message.sender)) {\n        const group = GroupStore.getGroup(peer.id);\n        return (\n          <div className=\"message__info message__info--avatar\">\n            <AvatarItem\n              className=\"message__avatar\"\n              image={group.avatar}\n              placeholder={group.placeholder}\n              title={group.name}\n              onClick={this.onClick}\n            />\n          </div>\n        )\n      } else {\n        return (\n          <div className=\"message__info message__info--avatar\">\n            <AvatarItem\n              className=\"message__avatar\"\n              image={message.sender.avatar}\n              placeholder={message.sender.placeholder}\n              title={message.sender.title}\n              onClick={this.onClick}\n            />\n          </div>\n        )\n      }\n    }\n  }\n\n  renderActions() {\n    const { peer, message } = this.props;\n    const { isHighlighted } = this.state;\n    const { isExperimental } = this.context;\n\n    const messageActionsMenuClassName = classnames('message__actions__menu', {\n      'message__actions__menu--opened': isHighlighted\n    });\n\n    return (\n      <div className=\"message__actions\">\n        <Reactions peer={peer} message={message}/>\n\n        <div className={messageActionsMenuClassName} onClick={this.showActions}>\n          <SvgIcon className=\"icon icon--dropdown\" glyph=\"cog\" />\n        </div>\n\n        {\n          isExperimental\n            ? <div className=\"message__actions__selector\" onClick={this.toggleMessageSelection}>\n                <i className=\"icon material-icons icon-check\"></i>\n              </div>\n            : null\n        }\n      </div>\n    );\n  }\n\n  render() {\n    const { message, isShort, isSelected, isEditing } = this.props;\n    const { isHighlighted } = this.state;\n\n    const messageClassName = classnames('message', {\n      'message--short': isShort,\n      'message--active': isHighlighted,\n      'message--selected': isSelected,\n      'message--editing': isEditing\n    });\n\n    return (\n      <div className={messageClassName} ref=\"messageItem\">\n        {this.renderLeftBlock()}\n        <div className=\"message__body\">\n          {this.renderHeader()}\n          <MessageContent content={message.content} />\n        </div>\n        {this.renderActions()}\n      </div>\n    );\n  }\n}\n\nexport default Container.create(MessageItem, { withProps: true });\n"]}