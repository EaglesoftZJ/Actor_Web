{"version":3,"sources":["../../../../src/components/dialog/messages/Document.react.js"],"names":["Document","state","peer","getCurrentPeer","renderIcon","props","fileUrl","isUploading","renderActions","handleDownloadClick","bind","isElectron","window","messenger","sendToElectron","render","fileName","fileSize","fileExtension","className","documentClassName","propTypes","string","isRequired","bool"],"mappings":";;;;AAIA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;+eARA;;;;AAWA;;;IAGMA,Q;;;AAUJ,sBAAc;AAAA;;AAAA,iDACZ,qBADY;;AAEZ,UAAKC,KAAL,GAAa;AACXC,YAAM,sBAAYC,cAAZ;AADK,KAAb;AAFY;AAKb;;qBAEDC,U,yBAAa;AAAA,iBACsB,KAAKC,KAD3B;AAAA,QACHC,OADG,UACHA,OADG;AAAA,QACMC,WADN,UACMA,WADN;;;AAGX,QAAIA,WAAJ,EAAiB;AACf,aACE;AAAA;AAAA,UAAK,WAAU,gBAAf;AACE;AAAA;AAAA,YAAG,WAAU,gBAAb;AAAA;AAAA;AADF,OADF;AAKD,KAND,MAMO;AACL,aACE;AAAA;AAAA,UAAG,WAAU,gBAAb,EAA8B,MAAMD,OAApC;AACE;AAAA;AAAA,YAAG,WAAU,gBAAb;AAAA;AAAA;AADF,OADF;AAKD;AACF,G;;qBAEDE,a,4BAAgB;AAAA,kBACmB,KAAKH,KADxB;AAAA,QACNC,OADM,WACNA,OADM;AAAA,QACGC,WADH,WACGA,WADH;;;AAGd,QAAIA,WAAJ,EAAiB;AACf,aACE;AAAA;AAAA;AAAM,qEAAkB,IAAG,mBAArB;AAAN,OADF;AAGD,KAJD,MAIO;AACL,aACE;AAAA;AAAA,UAAG,MAAMD,OAAT,EAAkB,SAAS,KAAKG,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;AAAgE,qEAAkB,IAAG,kBAArB;AAAhE,OADF;AAGD;AACF,G;;qBAEDD,mB,kCAAsB;AAAA,QACZP,IADY,GACH,KAAKD,KADF,CACZC,IADY;;AAEpB,QAAI,sBAAYS,UAAZ,EAAJ,EAA8B;AAC5BC,aAAOC,SAAP,CAAiBC,cAAjB,CAAgC,oBAAhC,EAAsDZ,IAAtD;AACD;AACF,G;;qBAEDa,M,qBAAS;AAAA,kBACkD,KAAKV,KADvD;AAAA,QACCW,QADD,WACCA,QADD;AAAA,QACWC,QADX,WACWA,QADX;AAAA,QACqBC,aADrB,WACqBA,aADrB;AAAA,QACoCC,SADpC,WACoCA,SADpC;;;AAGP,QAAMC,oBAAoB,0BAAWD,SAAX,EAAsB,KAAtB,CAA1B;;AAEA,WACE;AAAA;AAAA,QAAK,WAAWC,iBAAhB;AACE;AAAA;AAAA,UAAK,WAAU,cAAf;AACG,aAAKhB,UAAL,EADH;AAEE;AAAA;AAAA,YAAK,WAAU,QAAf;AACE;AAAA;AAAA,cAAM,WAAU,oBAAhB;AAAsCY;AAAtC,WADF;AAEE;AAAA;AAAA,cAAK,WAAU,gBAAf;AACE;AAAA;AAAA,gBAAM,WAAU,sBAAhB;AAAwCC;AAAxC,aADF;AAEE;AAAA;AAAA,gBAAM,WAAU,qBAAhB;AAAuCC;AAAvC;AAFF,WAFF;AAME;AAAA;AAAA,cAAK,WAAU,mBAAf;AACG,iBAAKV,aAAL;AADH;AANF;AAFF,OADF;AAcE,6CAAK,WAAU,QAAf;AAdF,KADF;AAkBD,G;;;;;AA/EGR,Q,CACGqB,S,GAAY;AACjBf,WAAS,iBAAUgB,MADF;AAEjBN,YAAU,iBAAUM,MAAV,CAAiBC,UAFV;AAGjBN,YAAU,iBAAUK,MAAV,CAAiBC,UAHV;AAIjBL,iBAAe,iBAAUI,MAAV,CAAiBC,UAJf;AAKjBhB,eAAa,iBAAUiB,IAAV,CAAeD,UALX;AAMjBJ,aAAW,iBAAUG;AANJ,C;kBAiFNtB,Q","file":"Document.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport DialogStore from '../../../stores/DialogStore';\nimport ActorClient from '../../../utils/ActorClient';\n\n\n/**\n * Class that represents a component for display document message content\n */\nclass Document extends Component {\n  static propTypes = {\n    fileUrl: PropTypes.string,\n    fileName: PropTypes.string.isRequired,\n    fileSize: PropTypes.string.isRequired,\n    fileExtension: PropTypes.string.isRequired,\n    isUploading: PropTypes.bool.isRequired,\n    className: PropTypes.string\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      peer: DialogStore.getCurrentPeer()\n    };\n  }\n\n  renderIcon() {\n    const { fileUrl, isUploading } = this.props;\n\n    if (isUploading) {\n      return (\n        <div className=\"document__icon\">\n          <i className=\"material-icons\">attach_file</i>\n        </div>\n      );\n    } else {\n      return (\n        <a className=\"document__icon\" href={fileUrl}>\n          <i className=\"material-icons\">attach_file</i>\n        </a>\n      );\n    }\n  }\n\n  renderActions() {\n    const { fileUrl, isUploading } = this.props;\n\n    if (isUploading) {\n      return (\n        <span><FormattedMessage id=\"message.uploading\"/></span>\n      );\n    } else {\n      return (\n        <a href={fileUrl} onClick={this.handleDownloadClick.bind(this)}><FormattedMessage id=\"message.download\"/></a>\n      );\n    }\n  }\n  \n  handleDownloadClick() {\n    const { peer } = this.state;\n    if (ActorClient.isElectron()) {\n      window.messenger.sendToElectron('will-download-peer', peer);\n    }\n  }\n\n  render() {\n    const { fileName, fileSize, fileExtension, className } = this.props;\n\n    const documentClassName = classnames(className, 'row');\n\n    return (\n      <div className={documentClassName}>\n        <div className=\"document row\">\n          {this.renderIcon()}\n          <div className=\"col-xs\">\n            <span className=\"document__filename\">{fileName}</span>\n            <div className=\"document__meta\">\n              <span className=\"document__meta__size\">{fileSize}</span>\n              <span className=\"document__meta__ext\">{fileExtension}</span>\n            </div>\n            <div className=\"document__actions\">\n              {this.renderActions()}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xs\"/>\n      </div>\n    );\n  }\n}\n\nexport default Document;\n"]}