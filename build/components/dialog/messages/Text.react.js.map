{"version":3,"sources":["../../../../src/components/dialog/messages/Text.react.js"],"names":["processText","text","processedText","md","linkify","render","replace","str","slice","list","getState","id","name","profile","nick","Date","getTime","Text","props","className","__html","propTypes","string","isRequired"],"mappings":";;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;+eAdA;;;;AAgBA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,gBAAgBD,IAApB;AACA,MAAIE,KAAK,yBAAe;AACtBC,aAAS;AADa,GAAf,CAAT;AAGAF,kBAAgBC,GAAGE,MAAH,CAAUH,aAAV,CAAhB;;AAEAA,kBAAgBA,cAAcI,OAAd,CAAsB,iBAAtB,EAAyC,UAACC,GAAD,EAAS;AAChEA,UAAMA,IAAIC,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkB,oEAAlB,GAAyFD,IAAIC,KAAJ,CAAU,CAAV,CAA/F;AACA,WAAOD,GAAP;AACD,GAHe,CAAhB;;AAKA;AACA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,kBAAgB,kCAAiBA,aAAjB,CAAhB;AACA,MAAIO,OAAO,2BAAiBC,QAAjB,EAAX;AACA,MAAIC,KAAK,EAAT;AACA,MAAIC,OAAO,EAAX;AACAV,kBAAgBA,cAAcI,OAAd,CAAsB,yBAAtB,EAAiD,UAACC,GAAD,EAAS;AACxE;AACA;AACA;AACA;;AAEA,QAAI,uBAAaG,QAAb,GAAwBG,OAAxB,CAAgCC,IAAhC,KAAyCP,IAAIC,KAAJ,CAAU,CAAV,CAA7C,EAA2D;AACvDG,WAAK,UAAU,IAAII,IAAJ,GAAWC,OAAX,EAAf;AACA;AACH;AACD,WAAO,wCAAwCL,EAAxC,GAA6C,IAA7C,IAAqDC,OAAO,MAAMA,IAAb,GAAoBL,GAAzE,IAAgF,SAAvF;AACD,GAXe,CAAhB;;AAaF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOL,aAAP;AACD;;IAEKe,I;;;;;;;;;iBAMJZ,M,qBAAS;AAAA,iBACqB,KAAKa,KAD1B;AAAA,QACCjB,IADD,UACCA,IADD;AAAA,QACOkB,SADP,UACOA,SADP;;;AAGP,WACE;AAAA;AAAA,QAAK,WAAWA,SAAhB;AACE,6CAAK,WAAU,MAAf,EAAsB,yBAAyB,EAAEC,QAAQpB,YAAYC,IAAZ,CAAV,EAA/C;AADF,KADF;AAKD,G;;;;;AAdGgB,I,CACGI,S,GAAY;AACjBpB,QAAM,iBAAUqB,MAAV,CAAiBC,UADN;AAEjBJ,aAAW,iBAAUG;AAFJ,C;kBAgBNL,I","file":"Text.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport MarkdownIt from 'markdown-it';\nimport linq from 'linq';\nimport ActorClient from '../../../utils/ActorClient';\n\nimport { processEmojiText } from '../../../utils/EmojiUtils';\nimport QuickSearchStore from '../../../stores/QuickSearchStore';\nimport RingStore from '../../../stores/RingStore';\nimport ProfileStore from '../../../stores/ProfileStore';\n\nimport RingActionCreators from '../../../actions/RingActionCreators'\n\nfunction processText(text) {\n  let processedText = text;\n  var md = new MarkdownIt({\n    linkify: true\n  });\n  processedText = md.render(processedText);\n\n  processedText = processedText.replace(/<a[\\w\\s]*href=/g, (str) => {\n    str = str.slice(0, 2) + ' target=\"_blank\" onClick=\"window.messenger.handleLinkClick(event)\"' + str.slice(2);\n    return str;\n  });\n\n  // processedText = ActorClient.renderMarkdown(processedText);\n  // 链接匹配\n//   var exp = /(((^https?:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/g\n//   processedText = processedText.replace(exp, (str) => {\n//     var url = /^http/.test(str) ? str : 'http://' + str;\n//     return `<a target=\"_blank\" href=\"${url}\" onClick=\"window.messenger.handleLinkClick(event)\">${str}</a>`;\n//   });\n\n\n  processedText = processEmojiText(processedText);\n  var list = QuickSearchStore.getState();\n  var id = '';\n  var name = '';\n  processedText = processedText.replace(/(@[0-9a-zA-Z_]{1,32})/ig, (str) => {\n    // var item = linq.from(list).where(`$.peerInfo.userName == '${str.slice(1)}'`).toArray()[0];\n    // if (item) {\n    //     name = item.peerInfo.title;\n    // }\n    \n    if (ProfileStore.getState().profile.nick === str.slice(1)) {\n        id = 'ring_' + new Date().getTime();\n        // name = ProfileStore.getState().profile.name;\n    }\n    return '<span class=\"message__mention\" id=\"' + id + '\">' + (name ? '@' + name : str) + '</span>';\n  });\n\n//   setTimeout(function() {\n//     if (RingStore.isNewMessage()) {\n//         RingActionCreators.setNew(false);\n//         id && RingActionCreators.setRingDomId(id);\n//         console.log('设置id设置id')\n//     }\n// }, 1);  \n\n  return processedText;\n}\n\nclass Text extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired,\n    className: PropTypes.string\n  };\n\n  render() {\n    const { text, className } = this.props;\n\n    return (\n      <div className={className}>\n        <div className=\"text\" dangerouslySetInnerHTML={{ __html: processText(text) }}/>\n      </div>\n    );\n  }\n}\n\nexport default Text;\n"]}