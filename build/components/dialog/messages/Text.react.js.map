{"version":3,"sources":["../../../../src/components/dialog/messages/Text.react.js"],"names":["processText","text","processedText","md","linkify","render","replace","str","slice","Text","props","className","__html","propTypes","string","isRequired"],"mappings":";;;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;+eARA;;;;AAUA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,gBAAgBD,IAApB;AACA,MAAIE,KAAK,yBAAe;AACtBC,aAAS;AADa,GAAf,CAAT;AAGAF,kBAAgBC,GAAGE,MAAH,CAAUH,aAAV,CAAhB;;AAEAA,kBAAgBA,cAAcI,OAAd,CAAsB,iBAAtB,EAAyC,UAACC,GAAD,EAAS;AAChEA,UAAMA,IAAIC,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkB,oEAAlB,GAAyFD,IAAIC,KAAJ,CAAU,CAAV,CAA/F;AACA,WAAOD,GAAP;AACD,GAHe,CAAhB;;AAKA;AACA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,kBAAgB,kCAAiBA,aAAjB,CAAhB;AACAA,kBAAgBA,cAAcI,OAAd,CAAsB,yBAAtB,EAAiD,0CAAjD,CAAhB;;AAEA,SAAOJ,aAAP;AACD;;IAEKO,I;;;;;;;;;iBAMJJ,M,qBAAS;AAAA,iBACqB,KAAKK,KAD1B;AAAA,QACCT,IADD,UACCA,IADD;AAAA,QACOU,SADP,UACOA,SADP;;;AAGP,WACE;AAAA;AAAA,QAAK,WAAWA,SAAhB;AACE,6CAAK,WAAU,MAAf,EAAsB,yBAAyB,EAAEC,QAAQZ,YAAYC,IAAZ,CAAV,EAA/C;AADF,KADF;AAKD,G;;;;;AAdGQ,I,CACGI,S,GAAY;AACjBZ,QAAM,iBAAUa,MAAV,CAAiBC,UADN;AAEjBJ,aAAW,iBAAUG;AAFJ,C;kBAgBNL,I","file":"Text.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport MarkdownIt from 'markdown-it';\nimport ActorClient from '../../../utils/ActorClient';\n\nimport { processEmojiText } from '../../../utils/EmojiUtils';\n\nfunction processText(text) {\n  let processedText = text;\n  var md = new MarkdownIt({\n    linkify: true\n  });\n  processedText = md.render(processedText);\n\n  processedText = processedText.replace(/<a[\\w\\s]*href=/g, (str) => {\n    str = str.slice(0, 2) + ' target=\"_blank\" onClick=\"window.messenger.handleLinkClick(event)\"' + str.slice(2);\n    return str;\n  });\n\n  // processedText = ActorClient.renderMarkdown(processedText);\n  // 链接匹配\n//   var exp = /(((^https?:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/g\n//   processedText = processedText.replace(exp, (str) => {\n//     var url = /^http/.test(str) ? str : 'http://' + str;\n//     return `<a target=\"_blank\" href=\"${url}\" onClick=\"window.messenger.handleLinkClick(event)\">${str}</a>`;\n//   });\n\n\n  processedText = processEmojiText(processedText);\n  processedText = processedText.replace(/(@[0-9a-zA-Z_]{5,32})/ig, '<span class=\"message__mention\">$1</span>');\n\n  return processedText;\n}\n\nclass Text extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired,\n    className: PropTypes.string\n  };\n\n  render() {\n    const { text, className } = this.props;\n\n    return (\n      <div className={className}>\n        <div className=\"text\" dangerouslySetInnerHTML={{ __html: processText(text) }}/>\n      </div>\n    );\n  }\n}\n\nexport default Text;\n"]}