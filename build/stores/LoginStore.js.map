{"version":3,"sources":["../../src/stores/LoginStore.js"],"names":["step","LOGIN_WAIT","errors","login","code","signup","name","remember","auto","nameList","OrderedSet","isCodeRequested","isCodeSended","isLoginRequested","isSignupStarted","myUid","console","log","LoginStore","dispatcher","getStep","getErrors","getLogin","getCode","getName","getRemember","getAuto","getNameList","getMyId","isLoggedIn","resetStore","intl","__onDispatch","action","type","AUTH_CHANGE_NAME_LIST","list","__emitChange","AUTH_CHANGE_REMEMBER","AUTH_CHANGE_AUTO","AUTH_CHANGE_LOGIN","AUTH_CHANGE_CODE","AUTH_CHANGE_NAME","AUTH_CODE_REQUEST","AUTH_CODE_REQUEST_SUCCESS","CODE_WAIT","AUTH_CODE_REQUEST_FAILURE","error","messages","AUTH_USER_REQUEST","AUTH_USER_REQUEST_SUCCESS","AUTH_USER_REQUEST_FAILURE","AUTH_CODE_SEND","AUTH_CODE_SEND_SUCCESS","AUTH_CODE_SEND_FAILURE","AUTH_PASSWORD_SEND","AUTH_PASSWORD_SEND_SUCCESS","AUTH_PASSWORD_SEND_FAILURE","AUTH_SIGNUP_START","NAME_WAIT","AUTH_SIGNUP","AUTH_SIGNUP_SUCCESS","AUTH_SIGNUP_FAILURE","AUTH_RESTART","AUTH_SET_LOGGED_SET_STORE","isElectron","obj","isLogin","sendToElectron","key","value","add","toJS","AUTH_SET_LOGGED_IN","getUid","AUTH_SET_LOGGED_OUT","keepAuto","localStorage","clear","location","reload"],"mappings":"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","file":"LoginStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AuthSteps } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\nimport Immutable from 'immutable';\n\nimport { getIntlData } from '../l18n';\n\nlet step = AuthSteps.LOGIN_WAIT,\n    errors = {\n      login: null,\n      code: null,\n      signup: null\n    },\n    login = '',\n    code = '',\n    name = '',\n    remember = false,\n    auto = false,\n    nameList = new Immutable.OrderedSet(),\n    isCodeRequested = false,\n    isCodeSended = false,\n    isLoginRequested = false,\n    isSignupStarted = false,\n    myUid = null;\n\n    console.log(123, nameList);\n\nclass LoginStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    // TODO: do not use intlData here. save error codes and send them to ui.\n    this.intl = getIntlData();\n  }\n\n  getStep = () => step;\n  getErrors = () => errors;\n  getLogin = () => login;\n  getCode = () => code;\n  getName = () => name;\n  getRemember = () => remember;\n  getAuto = () => auto;\n  getNameList = () => nameList;\n  isCodeRequested = () => isCodeRequested;\n  isCodeSended = () => isCodeSended;\n  isLoginRequested = () => isLoginRequested;\n  isSignupStarted = () => isSignupStarted;\n  getMyId = () => myUid;\n  isLoggedIn = () => ActorClient.isLoggedIn();\n\n\n  resetStore = () => {\n    step = AuthSteps.LOGIN_WAIT;\n    errors = {\n      login: null,\n      code: null,\n      signup: null\n    };\n    login = code = name = '';\n    remember = auto = false;\n    nameList = new Immutable.OrderedSet(),\n    isCodeRequested = isCodeSended = isSignupStarted = false;\n    myUid = null;\n  };\n\n  __onDispatch(action) {\n    switch (action.type) {\n      case ActionTypes.AUTH_CHANGE_NAME_LIST:\n      console.log(111, action.list);\n        nameList = action.list ? new Immutable.OrderedSet(action.list) : new Immutable.OrderedSet();\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_REMEMBER: \n        remember = action.remember;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_AUTO:\n        auto = action.auto;\n        this.__emitChange();\n      break;\n      case ActionTypes.AUTH_CHANGE_LOGIN:\n        login = action.login;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_CODE:\n        code = action.code;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_NAME:\n        name = action.name;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_CODE_REQUEST:\n        isCodeRequested = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_REQUEST_SUCCESS:\n        step = AuthSteps.CODE_WAIT;\n        errors.login = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_REQUEST_FAILURE:\n        switch (action.error) {\n          case 'PHONE_NUMBER_INVALID':\n            errors.login = this.intl.messages['login.errors.numberInvalid'];\n            break;\n          case 'CODE_WAIT':\n            errors.login = this.intl.messages['login.errors.codeWait'];\n            break;\n          default:\n            errors.login = action.error;\n        }\n        isCodeRequested = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_USER_REQUEST:\n        isCodeRequested = true;\n        isLoginRequested = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_USER_REQUEST_SUCCESS:\n        step = AuthSteps.CODE_WAIT;\n        errors.login = null;\n        isLoginRequested = false;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_USER_REQUEST_FAILURE:\n        switch (action.error) {\n          case 'USER_INVALID':\n            errors.login = this.intl.messages['login.errors.numberInvalid'];\n            break;\n          case 'CODE_WAIT':\n            errors.login = this.intl.messages['login.errors.codeWait'];\n            break;\n          default:\n            errors.login = action.error;\n        }\n        isCodeRequested = false;\n        isLoginRequested = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_CODE_SEND:\n        isCodeSended = true;\n        isLoginRequested = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_SEND_SUCCESS:\n        errors.code = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_SEND_FAILURE:\n        switch (action.error) {\n          case 'PHONE_CODE_INVALID':\n          case 'EMAIL_CODE_INVALID':\n            errors.code = this.intl.messages['login.errors.codeInvalid'];\n            break;\n          case 'PHONE_CODE_EXPIRED':\n            errors.code = this.intl.messages['login.errors.codeExpired'];\n            break;\n          default:\n            errors.code = action.error;\n        }\n        isCodeSended = false;\n        isLoginRequested = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_PASSWORD_SEND:\n        isCodeSended = true;\n        isLoginRequested = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_PASSWORD_SEND_SUCCESS:\n        errors.code = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_PASSWORD_SEND_FAILURE:\n        switch (action.error) {\n          case 'PHONE_CODE_INVALID':\n          case 'EMAIL_CODE_INVALID':\n            errors.code = this.intl.messages['login.errors.codeInvalid'];\n            break;\n          case 'PHONE_CODE_EXPIRED':\n            errors.code = this.intl.messages['login.errors.codeExpired'];\n            break;\n          default:\n            errors.code = action.error;\n        }\n        isCodeSended = false;\n        isLoginRequested = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SIGNUP_START:\n        step = AuthSteps.NAME_WAIT;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SIGNUP:\n        isSignupStarted = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SIGNUP_SUCCESS:\n        errors.signup = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SIGNUP_FAILURE:\n        switch (action.error) {\n          case 'NAME_INVALID':\n            errors.signup = this.intl.messages['login.errors.nameInvalid'];\n            break;\n          default:\n            errors.signup = action.error;\n        }\n        isSignupStarted = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_RESTART:\n        this.resetStore();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SET_LOGGED_SET_STORE: \n        // 登录后操作\n        if (ActorClient.isElectron()) {\n          var obj = {\n            auto: auto,\n            remember: remember, \n            login: remember ? login : '',\n            code: remember ? code : '',\n            isLogin: true\n          };\n          ActorClient.sendToElectron('setLoginStore', {key: 'info', value: obj });\n          ActorClient.sendToElectron('setLoginStore', {key: 'nameList', value: nameList.add(login).toJS() });\n        }\n      break;\n      case ActionTypes.AUTH_SET_LOGGED_IN:\n        myUid = ActorClient.getUid();\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SET_LOGGED_OUT:\n        // 退出登录\n        if (ActorClient.isElectron()) {\n          ActorClient.sendToElectron('setLoginStore', {key: 'info.auto', value: action.keepAuto&& remember });\n          ActorClient.sendToElectron('setLoginStore', {key: 'info.isLogin', value: false });\n        }\n        localStorage.clear();\n        location.reload();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new LoginStore(Dispatcher);\n"]}