{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":["MESSAGE_COUNT_STEP","getMessageId","message","rid","MessageStore","getInitialState","messages","overlay","isLoaded","receiveDate","readDate","readByMeDate","count","firstId","lastId","unreadId","editId","changeReason","UNKNOWN","selected","Set","isAllRendered","getState","length","reduce","state","action","type","BIND_DIALOG_PEER","MESSAGES_CHANGED","isElectron","sendToElectron","nextState","Math","min","UNSHIFT","lengthDiff","PUSH","UPDATE","unreadIndex","getMyId","MESSAGES_LOAD_MORE","MESSAGES_TOGGLE_SELECTED","has","id","remove","add","MESSAGES_EDIT_START","MESSAGES_EDIT_END"],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport Immutable from 'immutable';\r\nimport { ReduceStore } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\r\nimport ActorClient from '../utils/ActorClient';\r\nimport { getFirstUnreadMessageIndex } from '../utils/MessageUtils';\r\nimport UserStore from './UserStore';\r\n\r\nconst MESSAGE_COUNT_STEP = 20;\r\n\r\nconst getMessageId = (message) => message ? message.rid : null;\r\n\r\nclass MessageStore extends ReduceStore {\r\n  getInitialState() {\r\n    return {\r\n      messages: [],\r\n      overlay: [],\r\n      isLoaded: false,\r\n      receiveDate: 0,\r\n      readDate: 0,\r\n      readByMeDate: 0,\r\n      count: 0,\r\n      firstId: null,\r\n      lastId: null,\r\n      unreadId: null,\r\n      editId: null,\r\n      changeReason: MessageChangeReason.UNKNOWN,\r\n      selected: new Immutable.Set()\r\n    };\r\n  }\r\n\r\n  isAllRendered() {\r\n    const { messages, count } = this.getState();\r\n    return messages.length === count;\r\n  }\r\n\r\n  reduce (state, action) {\r\n    switch (action.type) {\r\n      case ActionTypes.BIND_DIALOG_PEER:\r\n        return this.getInitialState();\r\n\r\n      case ActionTypes.MESSAGES_CHANGED:\r\n        if (ActorClient.isElectron()) {\r\n          ActorClient.sendToElectron('message-change', {message: action.messages});\r\n        }\r\n        const firstId = getMessageId(action.messages[0]);\r\n        const lastId = getMessageId(action.messages[action.messages.length - 1]);\r\n\r\n        const nextState = {\r\n          ...state,\r\n          firstId,\r\n          lastId,\r\n          messages: action.messages,\r\n          overlay: action.overlay,\r\n          receiveDate: action.receiveDate,\r\n          readDate: action.readDate,\r\n          readByMeDate: action.readByMeDate,\r\n          isLoaded: action.isLoaded\r\n        };\r\n\r\n        if (firstId !== state.firstId) {\r\n          nextState.count = Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP);\r\n          nextState.changeReason = MessageChangeReason.UNSHIFT;\r\n        } else if (lastId !== state.lastId) {\r\n          // TODO: possible incorrect\r\n          const lengthDiff = action.messages.length - state.messages.length;\r\n\r\n          nextState.count = Math.min(action.messages.length, state.count + lengthDiff);\r\n          nextState.changeReason = MessageChangeReason.PUSH;\r\n        } else {\r\n          nextState.count = Math.min(action.messages.length, state.count);\r\n          nextState.changeReason = MessageChangeReason.UPDATE;\r\n        }\r\n\r\n        if (state.readByMeDate === 0 && action.readByMeDate > 0) {\r\n          const unreadIndex = getFirstUnreadMessageIndex(action.messages, action.readByMeDate, UserStore.getMyId());\r\n          if (unreadIndex === -1) {\r\n            nextState.unreadId = null;\r\n          } else {\r\n            nextState.unreadId = action.messages[unreadIndex].rid;\r\n            if (unreadIndex > nextState.count) {\r\n              nextState.count = Math.min((action.messages.length - unreadIndex) + MESSAGE_COUNT_STEP, action.messages.length);\r\n            }\r\n          }\r\n        }\r\n\r\n        return nextState;\r\n\r\n      case ActionTypes.MESSAGES_LOAD_MORE:\r\n        return {\r\n          ...state,\r\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\r\n          changeReason: MessageChangeReason.UNSHIFT\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\r\n        return {\r\n          ...state,\r\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_EDIT_START:\r\n        return {\r\n          ...state,\r\n          editId: action.message.rid\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_EDIT_END:\r\n        return {\r\n          ...state,\r\n          editId: null\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MessageStore(Dispatcher);\r\n"]}