{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":["MESSAGE_COUNT_STEP","getMessageId","message","rid","MessageStore","getInitialState","messages","overlay","isLoaded","receiveDate","readDate","readByMeDate","count","firstId","lastId","unreadId","editId","changeReason","UNKNOWN","selected","Set","isAllRendered","getState","length","reduce","state","action","type","BIND_DIALOG_PEER","MESSAGES_CHANGED","revertMessage","from","where","toArray","i","item","JSON","parse","content","text","msg","setTimeout","deleteMessage","getCurrentPeer","message1","slice","message2","message3","peer","dialogs","getDialogs","dialog","shorts","id","updateTime","Date","getTime","sort","a","b","concat","setDialogs","isElectron","sendToElectron","currentMsg","nextState","Math","min","UNSHIFT","lengthDiff","PUSH","UPDATE","unreadIndex","getMyId","MESSAGES_LOAD_MORE","MESSAGES_TOGGLE_SELECTED","has","remove","add","MESSAGES_EDIT_START","MESSAGES_EDIT_END"],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport { getFirstUnreadMessageIndex } from '../utils/MessageUtils';\nimport UserStore from './UserStore';\nimport DialogStore from './DialogStore';\nimport MessageActionCreators from '../actions/MessageActionCreators';\nimport DialogActionCreators from '../actions/DialogActionCreators';\nimport linq from 'linq';\n\nconst MESSAGE_COUNT_STEP = 20;\n\nconst getMessageId = (message) => message ? message.rid : null;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      receiveDate: 0,\n      readDate: 0,\n      readByMeDate: 0,\n      count: 0,\n      firstId: null,\n      lastId: null,\n      unreadId: null,\n      editId: null,\n      changeReason: MessageChangeReason.UNKNOWN,\n      selected: new Immutable.Set()\n    };\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return this.getInitialState();\n\n      case ActionTypes.MESSAGES_CHANGED:\n        // 撤回消息删除处理\n        let message = null;\n        var revertMessage = linq.from(action.messages).where('$.content.content === \"customJson\" && $.content.operation === \"revert\"').toArray();\n        // var renderMessage = linq.from(action.messages).except(revertMessage, '$.rid').toArray();\n        for (var i = 0; i < revertMessage.length; i++) {\n          message = linq.from(action.messages).where((item) => {\n            return item.rid === JSON.parse(revertMessage[i].content.text).rid;\n          }).toArray()[0];\n          if (message) {\n            (function(msg) {\n              setTimeout(function () {\n                MessageActionCreators.deleteMessage(DialogStore.getCurrentPeer(), msg.rid);\n              }, 1);\n            })(message);\n          }\n        }\n\n        var message1 = state.messages.slice(-1)[0];\n        var message2 = action.messages.slice(-2)[0];\n        var message3 = action.messages.slice(-1)[0];\n        if (message1 && message2 && message2.rid === message1.rid && message3.content.content !== 'service') {\n          // 判断是否为手动发送数据\n          setTimeout(function () {\n            var peer = DialogStore.getCurrentPeer();\n            var dialogs = DialogStore.getDialogs();\n            for (var i = 0; i < dialogs.length; i++) {\n              var dialog = linq.from(dialogs[i].shorts).where('$.peer.peer.id ===' + peer.id).toArray()[0];\n              if (dialog) {\n                dialog.updateTime = new Date().getTime();\n                dialogs[i].shorts.sort((a, b) => {\n                  return b.updateTime - a.updateTime;\n                });\n                dialogs[i].shorts = [].concat(dialogs[i].shorts);\n                break;\n              }\n            }\n            DialogActionCreators.setDialogs(dialogs);\n          }, 1);\n        }\n        \n        if (ActorClient.isElectron()) {\n          ActorClient.sendToElectron('message-change', {currentMsg: action.messages});\n        }\n        const firstId = getMessageId(action.messages[0]);\n        const lastId = getMessageId(action.messages[action.messages.length - 1]);\n\n        const nextState = {\n          ...state,\n          firstId,\n          lastId,\n          messages: action.messages,\n          overlay: action.overlay,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          readByMeDate: action.readByMeDate,\n          isLoaded: action.isLoaded\n        };\n\n        if (firstId !== state.firstId) {\n          nextState.count = Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP);\n          nextState.changeReason = MessageChangeReason.UNSHIFT;\n        } else if (lastId !== state.lastId) {\n          // TODO: possible incorrect\n          const lengthDiff = action.messages.length - state.messages.length;\n\n          nextState.count = Math.min(action.messages.length, state.count + lengthDiff);\n          nextState.changeReason = MessageChangeReason.PUSH;\n        } else {\n          nextState.count = Math.min(action.messages.length, state.count);\n          nextState.changeReason = MessageChangeReason.UPDATE;\n        }\n\n        if (state.readByMeDate === 0 && action.readByMeDate > 0) {\n          const unreadIndex = getFirstUnreadMessageIndex(action.messages, action.readByMeDate, UserStore.getMyId());\n          if (unreadIndex === -1) {\n            nextState.unreadId = null;\n          } else {\n            nextState.unreadId = action.messages[unreadIndex].rid;\n            if (unreadIndex > nextState.count) {\n              nextState.count = Math.min((action.messages.length - unreadIndex) + MESSAGE_COUNT_STEP, action.messages.length);\n            }\n          }\n        }\n\n        return nextState;\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\n          changeReason: MessageChangeReason.UNSHIFT\n        };\n\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\n        return {\n          ...state,\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\n        };\n\n      case ActionTypes.MESSAGES_EDIT_START:\n        return {\n          ...state,\n          editId: action.message.rid\n        };\n\n      case ActionTypes.MESSAGES_EDIT_END:\n        return {\n          ...state,\n          editId: null\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}