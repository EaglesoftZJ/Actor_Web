{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":["newDailogObj","oldDailogObj","DialogStore","getInitialState","peer","storePeer","dialogs","getDialogs","getState","getCurrentPeer","getStorePeer","isMember","type","GROUP","group","getGroup","id","members","length","isFavorite","favoriteDialogs","key","shorts","dialog","reduce","state","action","DIALOGS_CHANGED","console","log","JSON","stringify","arr","dailogs","parse","i","j","counter","updateTime","Date","getTime","push","sort","a","b","isElectron","sendToElectron","minimizeMsg","BIND_DIALOG_PEER","UNBIND_DIALOG_PEER","isAdmin","myID","getUid","adminId","from","where","select","toArray"],"mappings":"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","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport linq from 'Linq';\n\nvar newDailogObj = {},\n    oldDailogObj = {};\n\nclass DialogStore extends ReduceStore {\n  getInitialState() {\n    return {\n      peer: null,\n      storePeer: null,\n      dialogs: []\n    };\n  }\n\n  getDialogs() {\n    const { dialogs } = this.getState();\n    return dialogs;\n  }\n\n  getCurrentPeer() {\n    const { peer } = this.getState();\n    return peer;\n  }\n\n  getStorePeer() {\n    const { storePeer } = this.getState();\n    return storePeer;\n  }\n\n  isMember() {\n    const peer = this.getCurrentPeer();\n    if (peer && peer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(peer.id);\n      return group && group.members.length !== 0;\n    }\n\n    return true;\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.getDialogs(), { key: 'favourites' });\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  reduce(state, action) {\n    switch (action.type) {\n      case ActionTypes.DIALOGS_CHANGED:\n      console.log('dialogs', JSON.stringify(action.dialogs));\n        var arr = [];\n        var dailogs = JSON.parse(JSON.stringify(action.dialogs));\n        newDailogObj = {};\n        for (var i = 0; i < dailogs.length; i++) {\n          for (var j = 0; j < dailogs[i].shorts.length; j++) {\n            if (dailogs[i].shorts[j].counter > 0) {\n              var key = dailogs[i].shorts[j].peer.peer.key;\n              newDailogObj[key] = dailogs[i].shorts[j];\n              if (oldDailogObj[key] && oldDailogObj[key].counter < dailogs[i].shorts[j].counter || !oldDailogObj[key]) {\n                dailogs[i].shorts[j].updateTime = new Date().getTime();\n              } else {\n                dailogs[i].shorts[j].updateTime = oldDailogObj[key].updateTime;\n              }\n              arr.push(dailogs[i].shorts[j]);\n            } \n          }\n        }\n        oldDailogObj = newDailogObj;\n        arr.sort((a, b) => {\n          return b.updateTime - a.updateTime;\n        });\n        if (ActorClient.isElectron()) {\n          ActorClient.sendToElectron('new-messages', {minimizeMsg: arr});\n        }\n        return {\n          ...state,\n          dialogs: action.dialogs\n        };\n\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          peer: action.peer,\n          storePeer: action.peer\n        };\n\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        return {\n          ...state,\n          peer: null\n        };\n\n      default:\n        return state;\n    }\n  }\n  isAdmin() {\n    if (this.getState().peer.type === PeerTypes.GROUP) {\n      const myID = ActorClient.getUid();\n      const members = ActorClient.getGroup(this.getState().peer.id).members;\n      var adminId = linq.from(members).where('$.isAdmin == true').select('$.peerInfo.peer.id').toArray()[0];\n      return adminId === myID;\n    }\n    return true;\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}