{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":["DialogStore","getInitialState","peer","storePeer","dialogs","getDialogs","getState","getCurrentPeer","getStorePeer","isMember","type","GROUP","group","getGroup","id","members","length","isFavorite","favoriteDialogs","key","shorts","dialog","reduce","state","action","FILTER_DIALOGS_GROUP","DIALOGS_CHANGED","arr","sort","i","oldData","from","where","toArray","oldArr","j","oldDialog","index","indexOf","splice","counter","updateTime","Date","getTime","push","a","b","concat","console","log","isElectron","sendToElectron","getProfile","value","minimizeMsg","DIALOGS_STORE_CHANGED","BIND_DIALOG_PEER","UNBIND_DIALOG_PEER","isAdmin","myID","getUid","adminId","select"],"mappings":"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","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport ProfileStore from '../stores/ProfileStore';\nimport linq from 'Linq';\n\nclass DialogStore extends ReduceStore {\n  getInitialState() {\n    return {\n      peer: null,\n      storePeer: null,\n      dialogs: []\n    };\n\n  }\n\n  getDialogs() {\n    const { dialogs } = this.getState();\n    return dialogs;\n  }\n\n  getCurrentPeer() {\n    const { peer } = this.getState();\n    return peer;\n  }\n\n  getStorePeer() {\n    const { storePeer } = this.getState();\n    return storePeer;\n  }\n\n  isMember() {\n    const peer = this.getCurrentPeer();\n    if (peer && peer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(peer.id);\n      return group && group.members.length !== 0;\n    }\n\n    return true;\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.getDialogs(), { key: 'favourites' });\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  reduce(state, action) {\n    switch (action.type) {\n      case ActionTypes.FILTER_DIALOGS_GROUP:\n        // 过滤删除的群组\n        // function isTheSameToPre() {\n        //   return linq.from(group).except(preGroup, '$.peerInfo.peer.id').toArray().length === 0;\n        // }\n        // var group = PingyinSearchStore.getState()['群组'];\n        // if (group && state.dialogs.length > 0 && (!preGroup || !isTheSameToPre())) {\n        //   time++;\n        //   if (time > 1 && preGroup && preGroup.length === 0)  state.dialogs = preDialogs; \n        //   preGroup = group;\n        //   preDialogs = JSON.parse(JSON.stringify(state.dialogs));\n        //   for (var i = 0; i < state.dialogs.length; i++) {\n        //     if (state.dialogs[i].key !== 'privates') {\n        //       // 非用户组\n        //       var arr = linq.from(state.dialogs[i].shorts).where('$.peer.peer.type === \"group\"').toArray(); // 群组部分\n        //       var arr1 = linq.from(state.dialogs[i].shorts).where('$.peer.peer.type !== \"group\"').toArray(); // 非群组部分\n        //       var activeGroup = linq.from(arr).join(group, 'outer => outer.peer.peer.id', 'inner => inner.peerInfo.peer.id', 'outer => outer').toArray(); // 未删除群组\n        //       state.dialogs[i].shorts.splice(0, state.dialogs[i].shorts.length, ...arr1, ...activeGroup); // 重新组合\n        //     }\n        //   }\n        // }\n        return {\n          ...state,\n        };\n        \n      case ActionTypes.DIALOGS_CHANGED:\n        // web端左侧对话框列表排序处理，客户端消息推送处理\n        var arr = [];\n        if (!action.dialogs[0] || !action.dialogs[0].sort) {\n          for (var i = 0; i < action.dialogs.length; i++) {\n            var oldData = linq.from(state.dialogs).where(`$.key == '${action.dialogs[i].key}'`).toArray()[0];\n            var oldArr = [];\n            // 数据过滤\n            action.dialogs[i]['shorts'] = linq.from(action.dialogs[i]['shorts']).where('$.peer.title !== \"系统管理员\" && $.peer.title !== \"账号已删除\"').toArray();\n            if (oldData) {\n              oldArr = oldData.shorts;\n            }\n            for (var j = 0; j < action.dialogs[i].shorts.length; j++) {\n              var dialog = action.dialogs[i].shorts[j];\n              var key = dialog.peer.peer.key;\n              oldDialog = null;\n              var oldDialog = linq.from(oldArr).where(`$.peer.peer.key == '${key}'`).toArray()[0];\n              /* 取合集添加 */\n              var index = oldArr.indexOf(oldDialog);\n              index >= 0 && oldArr.splice(index, 1);\n              /* 取合集添加 */\n              if (oldDialog && oldDialog.counter < dialog.counter || !oldDialog) {\n                dialog.updateTime = new Date().getTime();\n              } else {\n                dialog.updateTime = oldDialog.updateTime;\n              }\n            }\n            /* 取合集添加 */\n            action.dialogs[i].shorts.push(...oldArr);\n            /* 取合集添加 */\n            action.dialogs[i].shorts.sort((a, b) => {\n              return b.updateTime - a.updateTime;\n            });\n            action.dialogs[i].sort = true;\n            arr = arr.concat(action.dialogs[i].shorts);\n          }\n        }\n\n        arr = linq.from(arr).where('$.counter > 0').toArray().sort((a, b) => {\n          return b.updateTime - a.updateTime;\n        });\n\n        console.log('arr', arr);\n        \n        if (ActorClient.isElectron()) {\n          ActorClient.sendToElectron('setDialogStore', {key: 'dialogs_' + ProfileStore.getProfile().id, value: action.dialogs});\n          ActorClient.sendToElectron('new-messages', {minimizeMsg: arr});\n        }\n        return {\n          ...state,\n          dialogs: action.dialogs\n        };\n      case ActionTypes.DIALOGS_STORE_CHANGED:\n        console.log('DIALOGS_STORE_CHANGED');\n        return {\n          ...state\n        }\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          peer: action.peer,\n          storePeer: action.peer\n        };\n\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        return {\n          ...state,\n          peer: null\n        };\n\n      default:\n        return state;\n    }\n  }\n  isAdmin() {\n    if (this.getState().peer.type === PeerTypes.GROUP) {\n      const myID = ActorClient.getUid();\n      const members = ActorClient.getGroup(this.getState().peer.id).members;\n      var adminId = linq.from(members).where('$.isAdmin == true').select('$.peerInfo.peer.id').toArray()[0];\n      return adminId === myID;\n    }\n    return true;\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}