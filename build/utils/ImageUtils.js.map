{"version":3,"sources":["../../src/utils/ImageUtils.js"],"names":["loadImage","renderImageToCanvas","getDimentions","handleCopy","downloadClick","lightbox","dataURItoBlob","dataURI","byteString","atob","split","mimeString","buffer","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","Blob","type","source","Promise","resolve","reject","image","document","createElement","onerror","onload","setAttribute","src","canvas","then","width","height","ctx","getContext","drawImage","_blurRect","maxWidth","maxHeight","url","img","Image","naturalWidth","naturalHeight","body","appendChild","dataUrl","toDataURL","sendToElectron","show","title","key","Date","getTime","location","href"],"mappings":"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","file":"ImageUtils.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\nimport '../vendor/canvasBlurRect';\n// import Lightbox from 'jsonlylightbox';\nimport Lightbox from '../../assets/scripts/lightbox.js';\nimport ActorClient from '../utils/ActorClient';\nimport MessageAlertActionCreators from '../actions/MessageAlertActionCreators';\nimport DialogStore from '../stores/DialogStore';\n\nconst lightbox = new Lightbox();\n\nconst dataURItoBlob = (dataURI) => {\n  const byteString = atob(dataURI.split(',')[1]);\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n  const buffer = new ArrayBuffer(byteString.length);\n\n  let view = new Uint8Array(buffer);\n  for (let i in byteString) {\n    view[i] = byteString.charCodeAt(i);\n  }\n\n  return new Blob([view], { type: mimeString });\n};\n\nexport {\n  lightbox,\n  dataURItoBlob\n};\n\nexport function loadImage(source) {\n  return new Promise((resolve, reject) => {\n    const image = document.createElement('img')\n    image.onerror = reject;\n    image.onload = () => {\n      image.onerror = null;\n      image.onload = null;\n      resolve(image);\n    };\n\n    image.setAttribute('crossOrigin', 'anonymous');\n    image.src = source;\n  });\n}\n\nexport function renderImageToCanvas(source, canvas) {\n  return loadImage(source).then((image) => {\n    const width = canvas.width = image.width;\n    const height = canvas.height = image.height;\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, width, height);\n    ctx._blurRect(0, 0, width, height, 4, 1);\n  });\n}\n\nexport function getDimentions(width, height, maxWidth = 300, maxHeight = 400) {\n  if (width > height) {\n    if (width > maxWidth) {\n      return {\n        width: maxWidth,\n        height: height * (maxWidth / width)\n      };\n    }\n  } else if (height > maxHeight) {\n    return {\n      width: width * (maxHeight / height),\n      height: maxHeight\n    };\n  }\n\n  return { width, height };\n}\n\nexport function handleCopy(url) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var img = new Image();\n    img.setAttribute('crossOrigin', 'anonymous');\n    img.onload = () => {\n      canvas.width = img.naturalWidth;\n      canvas.height = img.naturalHeight;\n      ctx.drawImage(img, 0, 0);\n      document.body.appendChild(canvas);\n      var dataUrl = canvas.toDataURL();\n      ActorClient.sendToElectron('copy-image', {dataUrl});\n      MessageAlertActionCreators.show({title: '图片复制成功', type: 'success', key: new Date().getTime()})\n\n    }\n    img.src = url;\n}\n\nexport function downloadClick(url) {\n    // 点击下载\n    location.href = url;\n    // window.open(url, 'self');\n    // var peer = DialogStore.getCurrentPeer();\n    // if (ActorClient.isElectron()) {\n    //     window.messenger.sendToElectron('will-download-info', {rid: message.rid, ...peer});\n    // }\n}\n"]}