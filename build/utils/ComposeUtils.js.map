{"version":3,"sources":["../../src/utils/ComposeUtils.js"],"names":["parseBotCommand","parseMentionQuery","text","matches","exec","name","args","_parseMentionQuery","runText","query","position","length","lastChar","charAt","charBeforeAt","trim","atStart","substring"],"mappings":";;;QAIgBA,e,GAAAA,e;QAsCAC,iB,GAAAA,iB;AA1ChB;;;;AAIO,SAASD,eAAT,CAAyBE,IAAzB,EAA+B;AACpC,MAAMC,UAAU,oBAAoBC,IAApB,CAAyBF,IAAzB,CAAhB;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SAAO;AACLE,UAAMF,QAAQ,CAAR,CADD;AAELG,UAAMH,QAAQ,CAAR;AAFD,GAAP;AAID;;AAED,SAASI,kBAAT,CAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,QAA5C,EAAsD;AACpD,MAAIF,QAAQG,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAMC,WAAWJ,QAAQK,MAAR,CAAeL,QAAQG,MAAR,GAAiB,CAAhC,CAAjB;AACA,QAAIC,aAAa,GAAjB,EAAsB;AACpB,UAAME,eAAeN,QAAQK,MAAR,CAAeL,QAAQG,MAAR,GAAiB,CAAhC,CAArB;AACA,UAAIG,aAAaC,IAAb,OAAwB,EAA5B,EAAgC;AAC9B,YAAMb,OAAQO,SAAS,EAAvB;AACA,YAAMO,UAAUd,KAAKS,MAAL,GAAc,CAAd,KAAoBD,QAApC;;AAEA,eAAO;AACLR,gBAAMA,IADD;AAELc,mBAASA;AAFJ,SAAP;AAID,OARD,MAQO;AACL,eAAO,IAAP;AACD;AACF,KAbD,MAaO,IAAIJ,SAASG,IAAT,OAAoB,EAAxB,EAA4B;AACjC,aAAO,IAAP;AACD,KAFM,MAEA;AACL,aAAOR,mBAAmBC,QAAQS,SAAR,CAAkB,CAAlB,EAAqBT,QAAQG,MAAR,GAAiB,CAAtC,CAAnB,EAA6DC,YAAYH,SAAS,EAArB,CAA7D,EAAuFC,QAAvF,CAAP;AACD;AACF;AACF;;AAEM,SAAST,iBAAT,CAA2BC,IAA3B,EAAiCQ,QAAjC,EAA2C;AAChD,SAAOH,mBAAmBL,KAAKe,SAAL,CAAe,CAAf,EAAkBP,QAAlB,CAAnB,EAAgD,IAAhD,EAAsDA,QAAtD,CAAP;AACD","file":"ComposeUtils.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nexport function parseBotCommand(text) {\n  const matches = /^\\/(.)?(?: (.+))?/.exec(text);\n  if (!matches) {\n    return null;\n  }\n\n  return {\n    name: matches[1],\n    args: matches[2]\n  };\n}\n\nfunction _parseMentionQuery(runText, query, position) {\n  if (runText.length === 0) {\n    return null;\n  } else {\n    const lastChar = runText.charAt(runText.length - 1);\n    if (lastChar === '@') {\n      const charBeforeAt = runText.charAt(runText.length - 2);\n      if (charBeforeAt.trim() === '') {\n        const text = (query || '');\n        const atStart = text.length + 1 === position;\n\n        return {\n          text: text,\n          atStart: atStart\n        };\n      } else {\n        return null;\n      }\n    } else if (lastChar.trim() === '') {\n      return null;\n    } else {\n      return _parseMentionQuery(runText.substring(0, runText.length - 1), lastChar + (query || ''), position);\n    }\n  }\n}\n\nexport function parseMentionQuery(text, position) {\n  return _parseMentionQuery(text.substring(0, position), null, position);\n}\n"]}