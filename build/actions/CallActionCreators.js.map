{"version":3,"sources":["../../src/actions/CallActionCreators.js"],"names":["CallActionCreators","handleCall","bind","setCall","hide","CALL_MODAL_HIDE","event","id","type","STARTED","setBindings","bindCall","CALL_MODAL_OPEN","ENDED","timer","stop","removeBindings","makePeerCall","peer","makeCall","makeGroupCall","peerId","request","CALL","success","CALL_SUCCESS","failure","CALL_ERROR","call","state","IN_PROGRESS","setCallTime","CALL_CHANGED","time","CALL_TIME_CHANGED","answerCall","callId","CALL_ANSWER","endCall","CALL_END","toggleCallMute","CALL_MUTE_TOGGLE","toggleFloating","CALL_FLOAT_TOGGLE"],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;+eAVA;;;;IAYMA,kB;;;AACJ,gCAAc;AAAA;;AAAA,iDACZ,0BADY;;AAGZ,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,OAAf;AAJY;AAKb;;+BAEDE,I,mBAAO;AACL,sCAAS,+BAAYC,eAArB;AACD,G;;+BAEDJ,U,uBAAWK,K,EAAO;AAAA,QACRC,EADQ,GACKD,KADL,CACRC,EADQ;AAAA,QACJC,IADI,GACKF,KADL,CACJE,IADI;;AAEhB,YAAQA,IAAR;AACE,WAAK,6BAAUC,OAAf;AACE,aAAKC,WAAL,CAAiB,MAAjB,EAAyB,CACvB,sBAAYC,QAAZ,CAAqBJ,EAArB,EAAyB,KAAKJ,OAA9B,CADuB,CAAzB;AAGA,0CAAS,+BAAYS,eAArB,EAAsC,EAAEL,MAAF,EAAtC;AACA;AACF,WAAK,6BAAUM,KAAf;AACE,YAAI,KAAKC,KAAT,EAAgB;AACd,eAAKA,KAAL,CAAWC,IAAX;AACA,eAAKD,KAAL,GAAa,IAAb;AACD;;AAED,aAAKE,cAAL,CAAoB,MAApB;AACA,0CAAS,+BAAYX,eAArB;AACA;AAfJ;AAiBD,G;;+BAEDY,Y,yBAAaC,I,EAAM;AACjB,QAAI,2BAAWA,IAAX,CAAJ,EAAsB;AACpB,WAAKC,QAAL,CAAcD,KAAKX,EAAnB;AACD,KAFD,MAEO;AACL,WAAKa,aAAL,CAAmBF,KAAKX,EAAxB;AACD;AACF,G;;+BAEDY,Q,qBAASE,M,EAAQ;AACf,2CAAc,sBAAYF,QAAZ,CAAqBE,MAArB,CAAd,EAA4C;AAC1CC,eAAS,+BAAYC,IADqB;AAE1CC,eAAS,+BAAYC,YAFqB;AAG1CC,eAAS,+BAAYC;AAHqB,KAA5C,EAIG,EAAEN,cAAF,EAJH;AAKD,G;;+BAEDD,a,0BAAcC,M,EAAQ;AACpB,2CAAc,sBAAYD,aAAZ,CAA0BC,MAA1B,CAAd,EAAiD;AAC/CC,eAAS,+BAAYC,IAD0B;AAE/CC,eAAS,+BAAYC,YAF0B;AAG/CC,eAAS,+BAAYC;AAH0B,KAAjD,EAIG,EAAEN,cAAF,EAJH;AAKD,G;;+BAEDlB,O,oBAAQyB,I,EAAM;AACZ,QAAIA,KAAKC,KAAL,KAAe,8BAAWC,WAA1B,IAAyC,CAAC,KAAKhB,KAAnD,EAA0D;AACxD,WAAKA,KAAL,GAAa,2BAAY,KAAKiB,WAAjB,CAAb;AACD;;AAED,sCAAS,+BAAYC,YAArB,EAAmC,EAAEJ,UAAF,EAAnC;AACD,G;;+BAEDG,W,wBAAYE,I,EAAM;AAChB,sCAAS,+BAAYC,iBAArB,EAAwC,EAAED,UAAF,EAAxC;AACD,G;;+BAEDE,U,uBAAWC,M,EAAQ;AACjB,0BAAYD,UAAZ,CAAuBC,MAAvB;AACA,sCAAS,+BAAYC,WAArB,EAAkC,EAAED,cAAF,EAAlC;AACD,G;;+BAEDE,O,oBAAQF,M,EAAQ;AACd,0BAAYE,OAAZ,CAAoBF,MAApB;AACA,sCAAS,+BAAYG,QAArB,EAA+B,EAAEH,cAAF,EAA/B;AACD,G;;+BAEDI,c,2BAAeJ,M,EAAQ;AACrB,0BAAYI,cAAZ,CAA2BJ,MAA3B;AACA,sCAAS,+BAAYK,gBAArB,EAAuC,EAAEL,cAAF,EAAvC;AACD,G;;+BAEDM,c,6BAAiB;AACf,sCAAS,+BAAYC,iBAArB;AACD,G;;;;;kBAGY,IAAI3C,kBAAJ,E","file":"CallActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, CallTypes, CallStates } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport createTimer from '../utils/createTimer';\nimport { isPeerUser } from '../utils/PeerUtils';\n\nimport ActionCreators from './ActionCreators';\n\nclass CallActionCreators extends ActionCreators {\n  constructor() {\n    super();\n\n    this.handleCall = this.handleCall.bind(this);\n    this.setCall = this.setCall.bind(this);\n  }\n\n  hide() {\n    dispatch(ActionTypes.CALL_MODAL_HIDE);\n  }\n\n  handleCall(event) {\n    const { id, type } = event;\n    switch (type) {\n      case CallTypes.STARTED:\n        this.setBindings('call', [\n          ActorClient.bindCall(id, this.setCall)\n        ]);\n        dispatch(ActionTypes.CALL_MODAL_OPEN, { id });\n        break;\n      case CallTypes.ENDED:\n        if (this.timer) {\n          this.timer.stop();\n          this.timer = null;\n        }\n\n        this.removeBindings('call');\n        dispatch(ActionTypes.CALL_MODAL_HIDE)\n        break;\n    }\n  }\n\n  makePeerCall(peer) {\n    if (isPeerUser(peer)) {\n      this.makeCall(peer.id);\n    } else {\n      this.makeGroupCall(peer.id);\n    }\n  }\n\n  makeCall(peerId) {\n    dispatchAsync(ActorClient.makeCall(peerId), {\n      request: ActionTypes.CALL,\n      success: ActionTypes.CALL_SUCCESS,\n      failure: ActionTypes.CALL_ERROR\n    }, { peerId });\n  }\n\n  makeGroupCall(peerId) {\n    dispatchAsync(ActorClient.makeGroupCall(peerId), {\n      request: ActionTypes.CALL,\n      success: ActionTypes.CALL_SUCCESS,\n      failure: ActionTypes.CALL_ERROR\n    }, { peerId });\n  }\n\n  setCall(call) {\n    if (call.state === CallStates.IN_PROGRESS && !this.timer) {\n      this.timer = createTimer(this.setCallTime);\n    }\n\n    dispatch(ActionTypes.CALL_CHANGED, { call });\n  }\n\n  setCallTime(time) {\n    dispatch(ActionTypes.CALL_TIME_CHANGED, { time });\n  }\n\n  answerCall(callId) {\n    ActorClient.answerCall(callId);\n    dispatch(ActionTypes.CALL_ANSWER, { callId })\n  }\n\n  endCall(callId) {\n    ActorClient.endCall(callId);\n    dispatch(ActionTypes.CALL_END, { callId })\n  }\n\n  toggleCallMute(callId) {\n    ActorClient.toggleCallMute(callId);\n    dispatch(ActionTypes.CALL_MUTE_TOGGLE, { callId })\n  }\n\n  toggleFloating() {\n    dispatch(ActionTypes.CALL_FLOAT_TOGGLE)\n  }\n}\n\nexport default new CallActionCreators();\n"]}