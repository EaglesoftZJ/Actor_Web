{"version":3,"sources":["../../src/actions/MessageActionCreators.js"],"names":["MessageActionCreators","setMessages","setMessageShown","peer","message","onMessageShown","sendTextMessage","text","console","log","MESSAGE_SEND_TEXT","editTextMessage","rid","MESSAGES_EDIT_END","editMessage","catch","e","error","deleteMessage","MESSAGE_DELETE","sendFileMessage","file","MESSAGE_SEND_FILE","sendPhotoMessage","photo","MESSAGE_SEND_PHOTO","sendAnimationMessage","sendClipboardPhotoMessage","sendVoiceMessage","duration","voice","MESSAGE_SEND_VOICE","addLike","MESSAGE_LIKE_ADD","removeLike","MESSAGE_LIKE_REMOVE","setHistoryMessages","historyMessages","HISTROY_MESSAGES_CHANGED","messages","overlay","isLoaded","receiveDate","readDate","readByMeDate","MESSAGES_CHANGED","toggleSelected","id","MESSAGES_TOGGLE_SELECTED","startEditMessage","MESSAGES_EDIT_START","editLastMessage","uid","getUid","getState"],"mappings":"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","file":"MessageActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { throttle } from 'lodash';\nimport { dispatch } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\nimport { prepareTextMessage, findLastEditableMessage } from '../utils/MessageUtils';\n\nimport MessageStore from '../stores/MessageStore';\n\nclass MessageActionCreators {\n  constructor() {\n    this.setMessages = throttle(this.setMessages, 10);\n  }\n\n  setMessageShown(peer, message) {\n    ActorClient.onMessageShown(peer, message);\n  }\n\n  sendTextMessage(peer, text) {\n    console.log('sendTextMessage', prepareTextMessage(text));\n    ActorClient.sendTextMessage(peer, prepareTextMessage(text));\n    dispatch(ActionTypes.MESSAGE_SEND_TEXT, { peer, text });\n  }\n\n  editTextMessage(peer, rid, text) {\n    dispatch(ActionTypes.MESSAGES_EDIT_END);\n    ActorClient.editMessage(peer, rid, text).catch((e) => {\n      console.error(e);\n    });\n  }\n\n  deleteMessage(peer, rid) {\n    ActorClient.deleteMessage(peer, rid);\n    dispatch(ActionTypes.MESSAGE_DELETE, { peer, rid });\n  }\n\n  sendFileMessage(peer, file) {\n    ActorClient.sendFileMessage(peer, file);\n    dispatch(ActionTypes.MESSAGE_SEND_FILE, { peer, file });\n  }\n\n  sendPhotoMessage(peer, photo) {\n    console.log('photo', photo);\n    ActorClient.sendPhotoMessage(peer, photo);\n    dispatch(ActionTypes.MESSAGE_SEND_PHOTO, { peer, photo });\n  }\n\n  sendAnimationMessage(peer, file) {\n    ActorClient.sendAnimationMessage(peer, file);\n  }\n\n  // Deprecated\n  sendClipboardPhotoMessage(peer, photo) {\n    ActorClient.sendClipboardPhotoMessage(peer, photo);\n  }\n\n  sendVoiceMessage(peer, duration, voice) {\n    ActorClient.sendVoiceMessage(peer, duration, voice);\n    dispatch(ActionTypes.MESSAGE_SEND_VOICE, { peer, duration, voice });\n  }\n\n  addLike(peer, rid) {\n    ActorClient.addLike(peer, rid);\n    dispatch(ActionTypes.MESSAGE_LIKE_ADD, { peer, rid });\n  }\n\n  removeLike(peer, rid) {\n    ActorClient.removeLike(peer, rid);\n    dispatch(ActionTypes.MESSAGE_LIKE_REMOVE, { peer, rid });\n  }\n\n  // 查询历史数据\n  setHistoryMessages(historyMessages) {\n    dispatch(ActionTypes.HISTROY_MESSAGES_CHANGED, { historyMessages });\n  }\n\n  setMessages(messages, overlay, isLoaded, receiveDate, readDate, readByMeDate) {\n    dispatch(ActionTypes.MESSAGES_CHANGED, {\n      messages,\n      overlay,\n      isLoaded,\n      receiveDate,\n      readDate,\n      readByMeDate\n    });\n  }\n\n  toggleSelected(id) {\n    dispatch(ActionTypes.MESSAGES_TOGGLE_SELECTED, { id });\n  }\n\n  startEditMessage(message) {\n    dispatch(ActionTypes.MESSAGES_EDIT_START, { message });\n  }\n\n  editLastMessage() {\n    const uid = ActorClient.getUid();\n    const { messages } = MessageStore.getState();\n    const message = findLastEditableMessage(messages, uid);\n\n    if (message) {\n      this.startEditMessage(message);\n    }\n  }\n}\n\nexport default new MessageActionCreators();\n"]}