{"version":3,"sources":["../../src/actions/QuickSearchActionCreators.js"],"names":["interval","getGroup","uid","callback","console","log","spapdata","method","ajax","url","type","data","beforeSend","request","setRequestHeader","success","res","nodeName","JSON","parse","find","html","QuickSearchActionCreators","show","QUICK_SEARCH_SHOW","toggleAutoFocus","hide","QUICK_SEARCH_HIDE","setQuickSearchList","list","from","where","toArray","QUICK_SEARCH_CHANGED_USER","clearInterval","time","setInterval","group","getProfile","setGroupList","id","groups","arr","i","length","push","peerInfo","avatar","placeholder","title","name","peer","key","QUICK_SEARCH_CHANGED_GROUP"],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,WAAW,IAAf,C,CAZA;;;;AAcA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,QAAvB,EAAiC;AAC/BC,UAAQC,GAAR,CAAY,cAAZ,EAA4BH,GAA5B;AACA,MAAII,+aAI+CJ,GAJ/C,kHAAJ;AAQA,MAAIK,SAAS,YAAb;AACA,mBAAEC,IAAF,CAAO;AACHC,SAAK,qEADF;AAEHC,UAAM,MAFH;AAGHC,UAAML,QAHH;AAIHM,cAJG,sBAIQC,OAJR,EAIiB;AAChBT,cAAQC,GAAR,CAAY,YAAZ,EAA0BQ,OAA1B;AACAA,cAAQC,gBAAR,CAAyB,cAAzB,EAAyC,wBAAzC;AACAD,cAAQC,gBAAR,CAAyB,YAAzB,EAAuC,sBAAsBP,MAA7D;AACH,KARE;;AASHQ,aAAS,iBAACC,GAAD,EAAS;AAChB,UAAIA,OAAOA,IAAIC,QAAf,EAAyB;AACvBd,iBAASe,KAAKC,KAAL,CAAW,sBAAEH,GAAF,EAAOI,IAAP,CAAY,QAAZ,EAAsBC,IAAtB,EAAX,CAAT;AACD;AACF;AAbE,GAAP;AAeD;;AAED,IAAIC,4BAA4B;AAC9BC,MAD8B,kBACvB;AACL,sCAAS,+BAAYC,iBAArB;AACA,oCAAsBC,eAAtB,CAAsC,KAAtC;AACD,GAJ6B;AAM9BC,MAN8B,kBAMvB;AACL,sCAAS,+BAAYC,iBAArB;AACA,oCAAsBF,eAAtB,CAAsC,IAAtC;AACD,GAT6B;AAW9BG,oBAX8B,8BAWXC,IAXW,EAWL;AACvB;AACAA,WAAO,eAAKC,IAAL,CAAUD,IAAV,EAAgBE,KAAhB,CAAsB,wHAAtB,EAAgJC,OAAhJ,EAAP;AACA,sCAAS,+BAAYC,yBAArB,EAAgD,EAAEJ,UAAF,EAAhD;AACA;AACAK,kBAAclC,QAAd;AACA,QAAImC,OAAO,CAAX;AACAnC,eAAWoC,YAAYC,KAAZ,EAAmB,GAAnB,CAAX;AACA,aAASA,KAAT,GAAiB;AACfF;AACA,UAAI,uBAAaG,UAAb,EAAJ,EAA+B;AAC7BhB,kCAA0BiB,YAA1B;AACAL,sBAAclC,QAAd;AACD,OAHD,MAGO,IAAImC,SAAS,GAAb,EAAkB;AACvBD,sBAAclC,QAAd;AACD;AACF;AACDqC;AACD,GA7B6B;AA8B9BE,cA9B8B,0BA8Bf;AACbtC,aAAS,uBAAaqC,UAAb,GAA0BE,EAAnC,EAAuC,UAACC,MAAD,EAAY;AACjD,UAAIC,MAAM,EAAV;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAyC;AACvC,YAAIN,QAAQ,sBAAYpC,QAAZ,CAAqBwC,OAAOE,CAAP,EAAUH,EAA/B,CAAZ;AACA,YAAGH,KAAH,EAAU;AACRK,cAAIG,IAAJ,CAAS;AACPC,sBAAU;AACRC,sBAAQV,MAAMU,MADN;AAERC,2BAAaX,MAAMW,WAFX;AAGRC,qBAAOZ,MAAMa,IAHL;AAIRC,oBAAM;AACJX,oBAAIH,MAAMG,EADN;AAEJ9B,sBAAM,OAFF;AAGJ0C,qBAAK,MAAMf,MAAMG;AAHb;AAJE;AADH,WAAT;AAYD;AACF;AACD,wCAAS,+BAAYa,0BAArB,EAAiD,EAAExB,MAAMa,GAAR,EAAjD;AACD,KApBD;AAqBD;AApD6B,CAAhC;kBAsDepB,yB","file":"QuickSearchActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport ComposeActionCreators from '../actions/ComposeActionCreators';\nimport ProfileStore from '../stores/ProfileStore';\nimport linq from 'Linq';\nimport $ from 'jquery';\n\nvar interval = null;\n\nfunction getGroup(uid, callback) {\n  console.log('getRroup uid', uid);\n  var spapdata = `<v:Envelope xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:d=\"http://www.w3.org/2001/XMLSchema\" xmlns:c=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:v=\"http://schemas.xmlsoap.org/soap/envelope/\">\n                    <v:Header />\n                    <v:Body>\n                        <n0:queryGroup id=\"o0\" c:root=\"1\" xmlns:n0=\"http://eaglesoft\">\n                            <id i:type=\"d:string\">${ uid }</id>\n                        </n0:queryGroup>\n                    </v:Body>\n                </v:Envelope>`;\n  var method = 'queryGroup';  \n  $.ajax({\n      url: 'http://61.175.100.14:8012/ActorServices-Maven/services/ActorService',\n      type: 'post',\n      data: spapdata,\n      beforeSend(request) {\n          console.log('beforeSend', request);\n          request.setRequestHeader('Content-Type', 'text/xml;charset=UTF-8');\n          request.setRequestHeader('SOAPActrin', 'http://eaglesoft/' + method);\n      },\n      success: (res) => {\n        if (res && res.nodeName) {\n          callback(JSON.parse($(res).find('return').html()))\n        }\n      }\n  });\n}\n\nvar QuickSearchActionCreators = {\n  show() {\n    dispatch(ActionTypes.QUICK_SEARCH_SHOW);\n    ComposeActionCreators.toggleAutoFocus(false);\n  },\n\n  hide() {\n    dispatch(ActionTypes.QUICK_SEARCH_HIDE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  },\n\n  setQuickSearchList(list) {\n    // 过滤系统管理员，过滤群组\n    list = linq.from(list).where('$.peerInfo.title.indexOf(\"系统管理员\") == -1 && $.peerInfo.title.indexOf(\"账号已删除\") == -1 && $.peerInfo.peer.type !== \"group\"').toArray();\n    dispatch(ActionTypes.QUICK_SEARCH_CHANGED_USER, { list });\n    // 从另外的接口获取群组数据更新\n    clearInterval(interval);\n    var time = 0;\n    interval = setInterval(group, 100);\n    function group() {\n      time++;\n      if (ProfileStore.getProfile()) {\n        QuickSearchActionCreators.setGroupList();\n        clearInterval(interval);\n      } else if (time === 100) {\n        clearInterval(interval);\n      }\n    }\n    group();\n  },\n  setGroupList() {\n    getGroup(ProfileStore.getProfile().id, (groups) => {\n      var arr = [];\n      for (var i = 0; i < groups.length; i++ ) {\n        var group = ActorClient.getGroup(groups[i].id);\n        if(group) {\n          arr.push({\n            peerInfo: {\n              avatar: group.avatar,\n              placeholder: group.placeholder,\n              title: group.name,\n              peer: {\n                id: group.id,\n                type: 'group',\n                key: 'g' + group.id\n              }\n            }\n          });\n        }\n      }\n      dispatch(ActionTypes.QUICK_SEARCH_CHANGED_GROUP, { list: arr });\n    });\n  }\n};\nexport default QuickSearchActionCreators;"]}